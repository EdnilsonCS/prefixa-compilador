/* simpleAdder.sable - A very simple program that recognizes two integers being added. */
Package prefixa ;
    
Helpers
    /* Our helpers */	
    digito = ['0' .. '9'] ;
    hex_digit = digito | ['a'..'f'] | ['A'..'F'];
    digito_bin = '0' | '1' ;
    espaco = ' ';
    rc = 13;
    nl = 10;
    all = [0 .. 0xffff];
    letter = [['a' .. 'z'] + ['A' .. 'Z']];
   	tab = 9;
    dot = '.';
    expo = 'E';
    name_part = letter (letter | digito | '_')*;
    name = name_part ('_' name_part)*;
    id = name;
    not_new_line = [all - nl];
    not_bracete_l = '{';
    not_new_aspa = [all - '"'];
    not_new_simples_aspa = [all - '''];
    number = digito+;
    nondigit = ['_' + [['a' .. 'z'] + ['A' .. 'Z']]];
    number_bin = ('0B' | '0b') digito_bin+ ;
    hex_number = '0x' hex_digit+;
 
 States
  normal,
  comment;
 
Tokens
   vazio = (espaco | rc | nl | tab)+;
   atribuicao = '<<';
   char_id = 'char';
   int_id = 'integer';
   bool_id = 'bool';
   real_id = 'real';
   barra_id = '|';
   if_id = 'if';
   else_id = 'else';
   start_block_id = 'start';
   end_block_id =  'end';
   not_id = 'not';
   and_id = 'and';
   or_id = 'or';
   comma = ',';
   none_id = 'none';
   
   soma = '+';
   menos = '-';
   mult = '*';
   div = '/';
   mod = '%';
   double_dot = ':';
   bool_type = 'true' | 'false';
   while = 'while';
   do = 'do';
   foreach = 'for each';
   l_par = '(';
   r_par = ')';
   l_bracket = '[';
   r_bracket = ']';
   l_brace = '{';
   r_brace = '}';
   igual_que = '=';
   menor_que = '<';
   menor_igual_que = '<=';
   maior_que = '>';
   maior_igual_que = '>=';
   semicolon = ';';
   true_id = 'true' ;
   false_id = 'false' ;
   vector_id = 'vetor';
   return = 'send back';
   scan =  'scan';
   print = 'print';
   string = '"'(not_new_aspa)* '"';
   char_var = ''' (not_new_simples_aspa)* ''' ; 
   comments = '#'(not_new_line)* nl; 
   long_comment = '{' (not_bracete_l*) '}';
   int_type = number | hex_number;
   real_type = '-'? (number dot number | number (dot number)? expo '-'? number);
   identifier = nondigit (digito | nondigit)*;
   number = '-'? number ;
   numero_bin = '-'? number_bin ;
   hex_number = hex_number;

Ignored Tokens
     vazio, comments, long_comment;
     

Productions

programa {-> programa } = decl_var* decl_func* {-> New programa ([decl_var], [decl_func]) };


decl_func {-> decl_func } = 
	 {tipo}   tipo identifier l_par r_par bloco_funcao					{-> New decl_func.tipo (tipo, identifier, Null, bloco_funcao) }   
	|{none}  none_id identifier l_par r_par bloco_funcao 					{-> New decl_func.none (none_id, identifier, Null, bloco_funcao) }   
	|{tipo_params} tipo identifier l_par decl_parametros r_par bloco_funcao 	{-> New decl_func.tipo (tipo, identifier, decl_parametros, bloco_funcao) }   
	|{none_params} none_id identifier l_par decl_parametros r_par bloco_funcao 	{-> New decl_func.none (none_id, identifier, decl_parametros, bloco_funcao) }  
    ;


decl_parametros {-> decl_parametros } = tipo identifier decl_param_adicional* {-> New decl_parametros (tipo, identifier, [decl_param_adicional]) };


decl_param_adicional { -> decl_param_adicional } = barra_id decl_parametro {-> New decl_param_adicional (decl_parametro) } ;

decl_parametro {-> decl_parametro } = tipo identifier {-> New decl_parametro (tipo, identifier) } ;
 
parametros {-> parametros } = stmt param_adicional* 	{-> New parametros (stmt, [param_adicional]) };

param_adicional {-> param_adicional } = barra_id stmt {-> New param_adicional (stmt) };


decl_var {-> decl_var } = tipo identifier id_adicional* semicolon {-> New decl_var (tipo, identifier, [id_adicional]) } ;


id_adicional {-> id_adicional } = comma identifier {-> New id_adicional (identifier) };


tipo {-> tipo } = {tipo_base} tipo_base {-> New tipo (tipo_base, Null) }
      | {vector} vector_id tipo_base l_bracket stmt r_bracket {-> New tipo (tipo_base, stmt) };

tipo_base {-> tipo_base } = 
             {int}  int_id  {-> New tipo_base.int  (int_id)  } 
 	       | {char} char_id {-> New tipo_base.char (char_id) }
 	       | {bool} bool_id {-> New tipo_base.bool (bool_id) } ;

comando_atrib {-> comando_atrib } =
    {vector} identifier l_bracket stmt r_bracket atribuicao [stmtdir]:stmt 	{-> New comando_atrib.vector (identifier, stmt, stmtdir.stmt) }
   |{id}    identifier atribuicao stmt {-> New comando_atrib.id (identifier, stmt) } ;


valor {-> stmt } =  {id}  identifier 	{-> New stmt.id (identifier) }
                     |{const} constante 		{-> New stmt.const (constante) };


stmt {-> stmt } = {op}         operacao 				{-> New stmt.operacao (operacao) }   
    |{stmt_vect}  identifier l_bracket stmt r_bracket	{-> New stmt.vector (identifier, stmt) }   
    |{stmt_valor} valor									{-> valor.stmt }
    |{stmt_chmd}  chamada 								{-> New stmt.chamada (chamada) }   
    ;

operacao {-> operacao } = {mais} soma stmt [stmt_l]:stmt              {-> New operacao.soma    (stmt, stmt_l) }
	    | {menos}   menos stmt [stmt_l]:stmt 	                          {-> New operacao.menos   (stmt, stmt_l) }  
	    | {mult}   mult stmt [stmt_l]:stmt                              {-> New operacao.mult   (stmt, stmt_l) }
	    | {frac}    div stmt [stmt_l]:stmt                               {-> New operacao.div    (stmt, stmt_l) }
	    | {igual}   igual_que stmt [stmt_l]:stmt                         {-> New operacao.igual_que   (stmt, stmt_l) } 
     | {meigual} menor_igual_que stmt [stmt_l]:stmt                   {-> New operacao.menor_igual_que (stmt, stmt_l) }
     | {maigual} maior_igual_que stmt [stmt_l]:stmt                   {-> New operacao.maior_igual_que (stmt, stmt_l) }
     | {menor}   menor_que stmt [stmt_l]:stmt                         {-> New operacao.menor_que   (stmt, stmt_l) }
     | {maior}   maior_que stmt [stmt_l]:stmt                         {-> New operacao.maior_que   (stmt, stmt_l) }
     | {and}     and_id stmt [stmt_l]:stmt                            {-> New operacao.and_id     (stmt, stmt_l) }
     | {or}      or_id stmt [stmt_l]:stmt                             {-> New operacao.or_id      (stmt, stmt_l) }
     | {not}     not_id stmt  	                                      {-> New operacao.not_id     (stmt) }  ;  

chamada {-> chamada } =
	 {vazio} identifier l_par r_par 				{-> New chamada (identifier, Null) }   
	|{param} identifier l_par parametros r_par	    {-> New chamada (identifier, parametros) };


comando {-> comando } =
	 {if}		if_id l_par stmt r_par comando else_id [else_tree]: comando							{-> New comando.if (stmt, comando, else_tree) }   
	|{while} 	while l_par stmt r_par comando 													{-> New comando.while (stmt, comando) }   
	|{foreach} 	foreach l_par tipo identifier double_dot [vectorid]:identifier r_par comando	{-> New comando.foreach (tipo, identifier, vectorid, comando) }   
	|{bloco} 	start_block_id decl_var* comando* end_block_id														{-> New comando.bloco ([decl_var],[comando]) }   
	|{exp_return} exp_return 																		{-> New comando.exp_return (exp_return) }   
	|{patrib} 	comando_atrib semicolon 															{-> New comando.comando_atrib (comando_atrib) }   
	|{chamada}	chamada semicolon 																	{-> New comando.chamada (chamada) }  
    ;

 
bloco_funcao {-> bloco_funcao } = start_block_id decl_var* comando* exp_return end_block_id {-> New bloco_funcao ([decl_var], [comando], exp_return) }  ;
  
exp_return {-> exp_return} = {vazio} return semicolon {-> New exp_return (Null) }
							 | return stmt? semicolon 	{-> New exp_return (stmt) };


constante {-> constante} = {intdec}  number {-> New constante.intdec (number) } 
 	 	   | {intbin}    numero_bin {-> New constante.intbin (numero_bin) }
 		   | {inthex}    hex_number  {-> New constante.inthex (hex_number) }
 		   | {char}      char_var {-> New constante.char (char_var) }
 		   | {string}    string  {-> New constante.string (string) }
 		   | {booltrue}  true_id {-> New constante.booltrue (true_id) }
 		   | {boolfalse} false_id {-> New constante.boolfalse (false_id) }; 


Abstract Syntax Tree

 programa = decl_var* decl_func* ;
 
 
 decl_func = {tipo} tipo identifier decl_parametros? bloco_funcao 
           | {none} none_id identifier decl_parametros? bloco_funcao;

 
 decl_parametros = tipo identifier decl_param_adicional* ;
 decl_param_adicional = decl_parametro ;
 decl_parametro = tipo identifier ;

 parametros = stmt param_adicional* ;
 param_adicional = stmt ;

 decl_var = tipo identifier id_adicional*;

 id_adicional = identifier ;
 
 tipo = tipo_base stmt?;
 
 tipo_base = {int}  int_id
           | {char} char_id
           | {bool} bool_id;     

comando_atrib = {vector} identifier [index]:stmt stmt 
               | {id} identifier stmt ;           

valor=
      {int} int_type|
      {real} real_type|
      {bool} bool_type| 
      {id} identifier;

stmt = {operacao}     operacao
      | {chamada} chamada   
      | {id}      identifier
      | {const}   constante
      | {vector}  identifier stmt;



 operacao = {soma}    stmt [stmt_r]:stmt
	 | {menos}   stmt [stmt_r]:stmt
	 | {mult}   stmt [stmt_r]:stmt
	 | {div}    stmt [stmt_r]:stmt
	 | {igual_que}   stmt [stmt_r]:stmt
   | {menor_igual_que} stmt [stmt_r]:stmt
     | {maior_igual_que} stmt [stmt_r]:stmt
     | {menor_que}   stmt [stmt_r]:stmt
     | {maior_que}   stmt [stmt_r]:stmt
     | {and_id}     stmt [stmt_r]:stmt
     | {or_id}      stmt [stmt_r]:stmt 
     | {not_id}     stmt ;      


chamada = identifier parametros? ;     



 comando = {if}        stmt comando [else_tree]:comando
 		 | {while}     stmt comando
 		 | {foreach}   tipo identifier [vectorid]:identifier comando
 		 | {bloco}     decl_var* comando* 
 		 | {exp_return}  exp_return
 		 | {comando_atrib} comando_atrib
     | {chamada}   chamada ;    


bloco_funcao = decl_var* comando* exp_return ;

exp_return =  stmt?;

constante = {intdec}  number
 	 	   | {intbin}    numero_bin
 		   | {inthex}    hex_number 
 		   | {char}      char_var
 		   | {string}    string 
 		   | {booltrue}  true_id
 		   | {boolfalse} false_id ;
