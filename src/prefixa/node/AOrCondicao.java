/* This file was generated by SableCC (http://www.sablecc.org/). */

package prefixa.node;

import prefixa.analysis.*;

@SuppressWarnings("nls")
public final class AOrCondicao extends PCondicao
{
    private PCondicao _condicao_;
    private POr _or_;

    public AOrCondicao()
    {
        // Constructor
    }

    public AOrCondicao(
        @SuppressWarnings("hiding") PCondicao _condicao_,
        @SuppressWarnings("hiding") POr _or_)
    {
        // Constructor
        setCondicao(_condicao_);

        setOr(_or_);

    }

    @Override
    public Object clone()
    {
        return new AOrCondicao(
            cloneNode(this._condicao_),
            cloneNode(this._or_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAOrCondicao(this);
    }

    public PCondicao getCondicao()
    {
        return this._condicao_;
    }

    public void setCondicao(PCondicao node)
    {
        if(this._condicao_ != null)
        {
            this._condicao_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._condicao_ = node;
    }

    public POr getOr()
    {
        return this._or_;
    }

    public void setOr(POr node)
    {
        if(this._or_ != null)
        {
            this._or_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._or_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._condicao_)
            + toString(this._or_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._condicao_ == child)
        {
            this._condicao_ = null;
            return;
        }

        if(this._or_ == child)
        {
            this._or_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._condicao_ == oldChild)
        {
            setCondicao((PCondicao) newChild);
            return;
        }

        if(this._or_ == oldChild)
        {
            setOr((POr) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
