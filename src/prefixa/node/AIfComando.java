/* This file was generated by SableCC (http://www.sablecc.org/). */

package prefixa.node;

import prefixa.analysis.*;

@SuppressWarnings("nls")
public final class AIfComando extends PComando
{
    private PStmt _stmt_;
    private PComando _comando_;
    private PComando _elseTree_;

    public AIfComando()
    {
        // Constructor
    }

    public AIfComando(
        @SuppressWarnings("hiding") PStmt _stmt_,
        @SuppressWarnings("hiding") PComando _comando_,
        @SuppressWarnings("hiding") PComando _elseTree_)
    {
        // Constructor
        setStmt(_stmt_);

        setComando(_comando_);

        setElseTree(_elseTree_);

    }

    @Override
    public Object clone()
    {
        return new AIfComando(
            cloneNode(this._stmt_),
            cloneNode(this._comando_),
            cloneNode(this._elseTree_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAIfComando(this);
    }

    public PStmt getStmt()
    {
        return this._stmt_;
    }

    public void setStmt(PStmt node)
    {
        if(this._stmt_ != null)
        {
            this._stmt_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._stmt_ = node;
    }

    public PComando getComando()
    {
        return this._comando_;
    }

    public void setComando(PComando node)
    {
        if(this._comando_ != null)
        {
            this._comando_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._comando_ = node;
    }

    public PComando getElseTree()
    {
        return this._elseTree_;
    }

    public void setElseTree(PComando node)
    {
        if(this._elseTree_ != null)
        {
            this._elseTree_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._elseTree_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._stmt_)
            + toString(this._comando_)
            + toString(this._elseTree_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._stmt_ == child)
        {
            this._stmt_ = null;
            return;
        }

        if(this._comando_ == child)
        {
            this._comando_ = null;
            return;
        }

        if(this._elseTree_ == child)
        {
            this._elseTree_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._stmt_ == oldChild)
        {
            setStmt((PStmt) newChild);
            return;
        }

        if(this._comando_ == oldChild)
        {
            setComando((PComando) newChild);
            return;
        }

        if(this._elseTree_ == oldChild)
        {
            setElseTree((PComando) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
