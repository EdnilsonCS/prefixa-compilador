/* This file was generated by SableCC (http://www.sablecc.org/). */

package prefixa.node;

import prefixa.analysis.*;

@SuppressWarnings("nls")
public final class ANotOpr extends POpr
{
    private TNotId _notId_;
    private PStmt _stmt_;

    public ANotOpr()
    {
        // Constructor
    }

    public ANotOpr(
        @SuppressWarnings("hiding") TNotId _notId_,
        @SuppressWarnings("hiding") PStmt _stmt_)
    {
        // Constructor
        setNotId(_notId_);

        setStmt(_stmt_);

    }

    @Override
    public Object clone()
    {
        return new ANotOpr(
            cloneNode(this._notId_),
            cloneNode(this._stmt_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseANotOpr(this);
    }

    public TNotId getNotId()
    {
        return this._notId_;
    }

    public void setNotId(TNotId node)
    {
        if(this._notId_ != null)
        {
            this._notId_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._notId_ = node;
    }

    public PStmt getStmt()
    {
        return this._stmt_;
    }

    public void setStmt(PStmt node)
    {
        if(this._stmt_ != null)
        {
            this._stmt_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._stmt_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._notId_)
            + toString(this._stmt_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._notId_ == child)
        {
            this._notId_ = null;
            return;
        }

        if(this._stmt_ == child)
        {
            this._stmt_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._notId_ == oldChild)
        {
            setNotId((TNotId) newChild);
            return;
        }

        if(this._stmt_ == oldChild)
        {
            setStmt((PStmt) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
