/* This file was generated by SableCC (http://www.sablecc.org/). */

package prefixa.node;

import prefixa.analysis.*;

@SuppressWarnings("nls")
public final class AFunctionDirectFunctionDeclarator extends PDirectFunctionDeclarator
{
    private TLPar _plp_;
    private PPointerFunction _pointerFunction_;
    private TRPar _prp_;
    private TLPar _pllp_;
    private PParameterList _parameterList_;
    private TRPar _plrp_;

    public AFunctionDirectFunctionDeclarator()
    {
        // Constructor
    }

    public AFunctionDirectFunctionDeclarator(
        @SuppressWarnings("hiding") TLPar _plp_,
        @SuppressWarnings("hiding") PPointerFunction _pointerFunction_,
        @SuppressWarnings("hiding") TRPar _prp_,
        @SuppressWarnings("hiding") TLPar _pllp_,
        @SuppressWarnings("hiding") PParameterList _parameterList_,
        @SuppressWarnings("hiding") TRPar _plrp_)
    {
        // Constructor
        setPlp(_plp_);

        setPointerFunction(_pointerFunction_);

        setPrp(_prp_);

        setPllp(_pllp_);

        setParameterList(_parameterList_);

        setPlrp(_plrp_);

    }

    @Override
    public Object clone()
    {
        return new AFunctionDirectFunctionDeclarator(
            cloneNode(this._plp_),
            cloneNode(this._pointerFunction_),
            cloneNode(this._prp_),
            cloneNode(this._pllp_),
            cloneNode(this._parameterList_),
            cloneNode(this._plrp_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAFunctionDirectFunctionDeclarator(this);
    }

    public TLPar getPlp()
    {
        return this._plp_;
    }

    public void setPlp(TLPar node)
    {
        if(this._plp_ != null)
        {
            this._plp_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._plp_ = node;
    }

    public PPointerFunction getPointerFunction()
    {
        return this._pointerFunction_;
    }

    public void setPointerFunction(PPointerFunction node)
    {
        if(this._pointerFunction_ != null)
        {
            this._pointerFunction_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._pointerFunction_ = node;
    }

    public TRPar getPrp()
    {
        return this._prp_;
    }

    public void setPrp(TRPar node)
    {
        if(this._prp_ != null)
        {
            this._prp_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._prp_ = node;
    }

    public TLPar getPllp()
    {
        return this._pllp_;
    }

    public void setPllp(TLPar node)
    {
        if(this._pllp_ != null)
        {
            this._pllp_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._pllp_ = node;
    }

    public PParameterList getParameterList()
    {
        return this._parameterList_;
    }

    public void setParameterList(PParameterList node)
    {
        if(this._parameterList_ != null)
        {
            this._parameterList_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._parameterList_ = node;
    }

    public TRPar getPlrp()
    {
        return this._plrp_;
    }

    public void setPlrp(TRPar node)
    {
        if(this._plrp_ != null)
        {
            this._plrp_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._plrp_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._plp_)
            + toString(this._pointerFunction_)
            + toString(this._prp_)
            + toString(this._pllp_)
            + toString(this._parameterList_)
            + toString(this._plrp_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._plp_ == child)
        {
            this._plp_ = null;
            return;
        }

        if(this._pointerFunction_ == child)
        {
            this._pointerFunction_ = null;
            return;
        }

        if(this._prp_ == child)
        {
            this._prp_ = null;
            return;
        }

        if(this._pllp_ == child)
        {
            this._pllp_ = null;
            return;
        }

        if(this._parameterList_ == child)
        {
            this._parameterList_ = null;
            return;
        }

        if(this._plrp_ == child)
        {
            this._plrp_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._plp_ == oldChild)
        {
            setPlp((TLPar) newChild);
            return;
        }

        if(this._pointerFunction_ == oldChild)
        {
            setPointerFunction((PPointerFunction) newChild);
            return;
        }

        if(this._prp_ == oldChild)
        {
            setPrp((TRPar) newChild);
            return;
        }

        if(this._pllp_ == oldChild)
        {
            setPllp((TLPar) newChild);
            return;
        }

        if(this._parameterList_ == oldChild)
        {
            setParameterList((PParameterList) newChild);
            return;
        }

        if(this._plrp_ == oldChild)
        {
            setPlrp((TRPar) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
