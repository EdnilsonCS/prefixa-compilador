/* This file was generated by SableCC (http://www.sablecc.org/). */

package prefixa.node;

import prefixa.analysis.*;

@SuppressWarnings("nls")
public final class AAndAnd extends PAnd
{
    private TAndId _andId_;
    private PCondicao _condicao_;

    public AAndAnd()
    {
        // Constructor
    }

    public AAndAnd(
        @SuppressWarnings("hiding") TAndId _andId_,
        @SuppressWarnings("hiding") PCondicao _condicao_)
    {
        // Constructor
        setAndId(_andId_);

        setCondicao(_condicao_);

    }

    @Override
    public Object clone()
    {
        return new AAndAnd(
            cloneNode(this._andId_),
            cloneNode(this._condicao_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAAndAnd(this);
    }

    public TAndId getAndId()
    {
        return this._andId_;
    }

    public void setAndId(TAndId node)
    {
        if(this._andId_ != null)
        {
            this._andId_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._andId_ = node;
    }

    public PCondicao getCondicao()
    {
        return this._condicao_;
    }

    public void setCondicao(PCondicao node)
    {
        if(this._condicao_ != null)
        {
            this._condicao_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._condicao_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._andId_)
            + toString(this._condicao_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._andId_ == child)
        {
            this._andId_ = null;
            return;
        }

        if(this._condicao_ == child)
        {
            this._condicao_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._andId_ == oldChild)
        {
            setAndId((TAndId) newChild);
            return;
        }

        if(this._condicao_ == oldChild)
        {
            setCondicao((PCondicao) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
