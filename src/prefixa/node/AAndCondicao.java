/* This file was generated by SableCC (http://www.sablecc.org/). */

package prefixa.node;

import prefixa.analysis.*;

@SuppressWarnings("nls")
public final class AAndCondicao extends PCondicao
{
    private PCondicao _condicao_;
    private PAnd _and_;

    public AAndCondicao()
    {
        // Constructor
    }

    public AAndCondicao(
        @SuppressWarnings("hiding") PCondicao _condicao_,
        @SuppressWarnings("hiding") PAnd _and_)
    {
        // Constructor
        setCondicao(_condicao_);

        setAnd(_and_);

    }

    @Override
    public Object clone()
    {
        return new AAndCondicao(
            cloneNode(this._condicao_),
            cloneNode(this._and_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAAndCondicao(this);
    }

    public PCondicao getCondicao()
    {
        return this._condicao_;
    }

    public void setCondicao(PCondicao node)
    {
        if(this._condicao_ != null)
        {
            this._condicao_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._condicao_ = node;
    }

    public PAnd getAnd()
    {
        return this._and_;
    }

    public void setAnd(PAnd node)
    {
        if(this._and_ != null)
        {
            this._and_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._and_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._condicao_)
            + toString(this._and_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._condicao_ == child)
        {
            this._condicao_ = null;
            return;
        }

        if(this._and_ == child)
        {
            this._and_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._condicao_ == oldChild)
        {
            setCondicao((PCondicao) newChild);
            return;
        }

        if(this._and_ == oldChild)
        {
            setAnd((PAnd) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
