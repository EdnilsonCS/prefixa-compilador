/* This file was generated by SableCC (http://www.sablecc.org/). */

package prefixa.analysis;

import java.util.*;
import prefixa.node.*;

public class DepthFirstAdapter extends AnalysisAdapter
{
    public void inStart(Start node)
    {
        defaultIn(node);
    }

    public void outStart(Start node)
    {
        defaultOut(node);
    }

    public void defaultIn(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    public void defaultOut(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    @Override
    public void caseStart(Start node)
    {
        inStart(node);
        node.getPType().apply(this);
        node.getEOF().apply(this);
        outStart(node);
    }

    public void inAIntType(AIntType node)
    {
        defaultIn(node);
    }

    public void outAIntType(AIntType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIntType(AIntType node)
    {
        inAIntType(node);
        if(node.getIntId() != null)
        {
            node.getIntId().apply(this);
        }
        outAIntType(node);
    }

    public void inABoolType(ABoolType node)
    {
        defaultIn(node);
    }

    public void outABoolType(ABoolType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABoolType(ABoolType node)
    {
        inABoolType(node);
        if(node.getBoolId() != null)
        {
            node.getBoolId().apply(this);
        }
        outABoolType(node);
    }

    public void inARealType(ARealType node)
    {
        defaultIn(node);
    }

    public void outARealType(ARealType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARealType(ARealType node)
    {
        inARealType(node);
        if(node.getRealId() != null)
        {
            node.getRealId().apply(this);
        }
        outARealType(node);
    }

    public void inACharType(ACharType node)
    {
        defaultIn(node);
    }

    public void outACharType(ACharType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACharType(ACharType node)
    {
        inACharType(node);
        if(node.getCharId() != null)
        {
            node.getCharId().apply(this);
        }
        outACharType(node);
    }

    public void inAIntValor(AIntValor node)
    {
        defaultIn(node);
    }

    public void outAIntValor(AIntValor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIntValor(AIntValor node)
    {
        inAIntValor(node);
        if(node.getIntType() != null)
        {
            node.getIntType().apply(this);
        }
        outAIntValor(node);
    }

    public void inARealValor(ARealValor node)
    {
        defaultIn(node);
    }

    public void outARealValor(ARealValor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARealValor(ARealValor node)
    {
        inARealValor(node);
        if(node.getRealType() != null)
        {
            node.getRealType().apply(this);
        }
        outARealValor(node);
    }

    public void inABoolValor(ABoolValor node)
    {
        defaultIn(node);
    }

    public void outABoolValor(ABoolValor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABoolValor(ABoolValor node)
    {
        inABoolValor(node);
        if(node.getBoolType() != null)
        {
            node.getBoolType().apply(this);
        }
        outABoolValor(node);
    }

    public void inAVarValor(AVarValor node)
    {
        defaultIn(node);
    }

    public void outAVarValor(AVarValor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVarValor(AVarValor node)
    {
        inAVarValor(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outAVarValor(node);
    }

    public void inAUnicoTypeList(AUnicoTypeList node)
    {
        defaultIn(node);
    }

    public void outAUnicoTypeList(AUnicoTypeList node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAUnicoTypeList(AUnicoTypeList node)
    {
        inAUnicoTypeList(node);
        if(node.getType() != null)
        {
            node.getType().apply(this);
        }
        outAUnicoTypeList(node);
    }

    public void inAVariosTypeList(AVariosTypeList node)
    {
        defaultIn(node);
    }

    public void outAVariosTypeList(AVariosTypeList node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVariosTypeList(AVariosTypeList node)
    {
        inAVariosTypeList(node);
        if(node.getType() != null)
        {
            node.getType().apply(this);
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        if(node.getTypes() != null)
        {
            node.getTypes().apply(this);
        }
        outAVariosTypeList(node);
    }

    public void inAIfCondicional(AIfCondicional node)
    {
        defaultIn(node);
    }

    public void outAIfCondicional(AIfCondicional node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIfCondicional(AIfCondicional node)
    {
        inAIfCondicional(node);
        if(node.getIfId() != null)
        {
            node.getIfId().apply(this);
        }
        if(node.getCondicao() != null)
        {
            node.getCondicao().apply(this);
        }
        if(node.getBloco() != null)
        {
            node.getBloco().apply(this);
        }
        outAIfCondicional(node);
    }

    public void inAIfelseCondicional(AIfelseCondicional node)
    {
        defaultIn(node);
    }

    public void outAIfelseCondicional(AIfelseCondicional node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIfelseCondicional(AIfelseCondicional node)
    {
        inAIfelseCondicional(node);
        if(node.getCondicional() != null)
        {
            node.getCondicional().apply(this);
        }
        if(node.getElseId() != null)
        {
            node.getElseId().apply(this);
        }
        if(node.getBloco() != null)
        {
            node.getBloco().apply(this);
        }
        outAIfelseCondicional(node);
    }

    public void inACondicao(ACondicao node)
    {
        defaultIn(node);
    }

    public void outACondicao(ACondicao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACondicao(ACondicao node)
    {
        inACondicao(node);
        if(node.getBoolType() != null)
        {
            node.getBoolType().apply(this);
        }
        outACondicao(node);
    }

    public void inAEqCondicao(AEqCondicao node)
    {
        defaultIn(node);
    }

    public void outAEqCondicao(AEqCondicao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEqCondicao(AEqCondicao node)
    {
        inAEqCondicao(node);
        if(node.getValor() != null)
        {
            node.getValor().apply(this);
        }
        if(node.getIgual() != null)
        {
            node.getIgual().apply(this);
        }
        outAEqCondicao(node);
    }

    public void inAMqCondicao(AMqCondicao node)
    {
        defaultIn(node);
    }

    public void outAMqCondicao(AMqCondicao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMqCondicao(AMqCondicao node)
    {
        inAMqCondicao(node);
        if(node.getValor() != null)
        {
            node.getValor().apply(this);
        }
        if(node.getMaior() != null)
        {
            node.getMaior().apply(this);
        }
        outAMqCondicao(node);
    }

    public void inAMnCondicao(AMnCondicao node)
    {
        defaultIn(node);
    }

    public void outAMnCondicao(AMnCondicao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMnCondicao(AMnCondicao node)
    {
        inAMnCondicao(node);
        if(node.getValor() != null)
        {
            node.getValor().apply(this);
        }
        if(node.getMenor() != null)
        {
            node.getMenor().apply(this);
        }
        outAMnCondicao(node);
    }

    public void inAMneqCondicao(AMneqCondicao node)
    {
        defaultIn(node);
    }

    public void outAMneqCondicao(AMneqCondicao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMneqCondicao(AMneqCondicao node)
    {
        inAMneqCondicao(node);
        if(node.getValor() != null)
        {
            node.getValor().apply(this);
        }
        if(node.getMenorIgual() != null)
        {
            node.getMenorIgual().apply(this);
        }
        outAMneqCondicao(node);
    }

    public void inAMaeqCondicao(AMaeqCondicao node)
    {
        defaultIn(node);
    }

    public void outAMaeqCondicao(AMaeqCondicao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMaeqCondicao(AMaeqCondicao node)
    {
        inAMaeqCondicao(node);
        if(node.getValor() != null)
        {
            node.getValor().apply(this);
        }
        if(node.getMaiorIgual() != null)
        {
            node.getMaiorIgual().apply(this);
        }
        outAMaeqCondicao(node);
    }

    public void inANegCondicao(ANegCondicao node)
    {
        defaultIn(node);
    }

    public void outANegCondicao(ANegCondicao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANegCondicao(ANegCondicao node)
    {
        inANegCondicao(node);
        if(node.getNotId() != null)
        {
            node.getNotId().apply(this);
        }
        if(node.getCondicao() != null)
        {
            node.getCondicao().apply(this);
        }
        outANegCondicao(node);
    }

    public void inAAndCondicao(AAndCondicao node)
    {
        defaultIn(node);
    }

    public void outAAndCondicao(AAndCondicao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAndCondicao(AAndCondicao node)
    {
        inAAndCondicao(node);
        if(node.getCondicao() != null)
        {
            node.getCondicao().apply(this);
        }
        if(node.getAnd() != null)
        {
            node.getAnd().apply(this);
        }
        outAAndCondicao(node);
    }

    public void inAOrCondicao(AOrCondicao node)
    {
        defaultIn(node);
    }

    public void outAOrCondicao(AOrCondicao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOrCondicao(AOrCondicao node)
    {
        inAOrCondicao(node);
        if(node.getCondicao() != null)
        {
            node.getCondicao().apply(this);
        }
        if(node.getOr() != null)
        {
            node.getOr().apply(this);
        }
        outAOrCondicao(node);
    }

    public void inACondCondicao(ACondCondicao node)
    {
        defaultIn(node);
    }

    public void outACondCondicao(ACondCondicao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACondCondicao(ACondCondicao node)
    {
        inACondCondicao(node);
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getCondicao() != null)
        {
            node.getCondicao().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        outACondCondicao(node);
    }

    public void inAEqIgual(AEqIgual node)
    {
        defaultIn(node);
    }

    public void outAEqIgual(AEqIgual node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEqIgual(AEqIgual node)
    {
        inAEqIgual(node);
        if(node.getIgualQue() != null)
        {
            node.getIgualQue().apply(this);
        }
        if(node.getValor() != null)
        {
            node.getValor().apply(this);
        }
        outAEqIgual(node);
    }

    public void inAMqMaior(AMqMaior node)
    {
        defaultIn(node);
    }

    public void outAMqMaior(AMqMaior node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMqMaior(AMqMaior node)
    {
        inAMqMaior(node);
        if(node.getMaiorQue() != null)
        {
            node.getMaiorQue().apply(this);
        }
        if(node.getValor() != null)
        {
            node.getValor().apply(this);
        }
        outAMqMaior(node);
    }

    public void inAMnMenor(AMnMenor node)
    {
        defaultIn(node);
    }

    public void outAMnMenor(AMnMenor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMnMenor(AMnMenor node)
    {
        inAMnMenor(node);
        if(node.getMenorQue() != null)
        {
            node.getMenorQue().apply(this);
        }
        if(node.getValor() != null)
        {
            node.getValor().apply(this);
        }
        outAMnMenor(node);
    }

    public void inAMneqMenorIgual(AMneqMenorIgual node)
    {
        defaultIn(node);
    }

    public void outAMneqMenorIgual(AMneqMenorIgual node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMneqMenorIgual(AMneqMenorIgual node)
    {
        inAMneqMenorIgual(node);
        if(node.getMenorIgualQue() != null)
        {
            node.getMenorIgualQue().apply(this);
        }
        if(node.getValor() != null)
        {
            node.getValor().apply(this);
        }
        outAMneqMenorIgual(node);
    }

    public void inAMaeqMaiorIgual(AMaeqMaiorIgual node)
    {
        defaultIn(node);
    }

    public void outAMaeqMaiorIgual(AMaeqMaiorIgual node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMaeqMaiorIgual(AMaeqMaiorIgual node)
    {
        inAMaeqMaiorIgual(node);
        if(node.getMaiorIgualQue() != null)
        {
            node.getMaiorIgualQue().apply(this);
        }
        if(node.getValor() != null)
        {
            node.getValor().apply(this);
        }
        outAMaeqMaiorIgual(node);
    }

    public void inAAndAnd(AAndAnd node)
    {
        defaultIn(node);
    }

    public void outAAndAnd(AAndAnd node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAndAnd(AAndAnd node)
    {
        inAAndAnd(node);
        if(node.getAndId() != null)
        {
            node.getAndId().apply(this);
        }
        if(node.getCondicao() != null)
        {
            node.getCondicao().apply(this);
        }
        outAAndAnd(node);
    }

    public void inAOrOr(AOrOr node)
    {
        defaultIn(node);
    }

    public void outAOrOr(AOrOr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOrOr(AOrOr node)
    {
        inAOrOr(node);
        if(node.getOrId() != null)
        {
            node.getOrId().apply(this);
        }
        if(node.getCondicao() != null)
        {
            node.getCondicao().apply(this);
        }
        outAOrOr(node);
    }

    public void inABlocoBloco(ABlocoBloco node)
    {
        defaultIn(node);
    }

    public void outABlocoBloco(ABlocoBloco node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABlocoBloco(ABlocoBloco node)
    {
        inABlocoBloco(node);
        if(node.getStartBlockId() != null)
        {
            node.getStartBlockId().apply(this);
        }
        if(node.getFunctionDeclaration() != null)
        {
            node.getFunctionDeclaration().apply(this);
        }
        if(node.getEndBlockId() != null)
        {
            node.getEndBlockId().apply(this);
        }
        outABlocoBloco(node);
    }

    public void inAFunctionDeclaration(AFunctionDeclaration node)
    {
        defaultIn(node);
    }

    public void outAFunctionDeclaration(AFunctionDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFunctionDeclaration(AFunctionDeclaration node)
    {
        inAFunctionDeclaration(node);
        if(node.getType() != null)
        {
            node.getType().apply(this);
        }
        if(node.getFunctionDeclarator() != null)
        {
            node.getFunctionDeclarator().apply(this);
        }
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        outAFunctionDeclaration(node);
    }

    public void inAIdentifierFunctionDeclaration(AIdentifierFunctionDeclaration node)
    {
        defaultIn(node);
    }

    public void outAIdentifierFunctionDeclaration(AIdentifierFunctionDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIdentifierFunctionDeclaration(AIdentifierFunctionDeclaration node)
    {
        inAIdentifierFunctionDeclaration(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getFunctionDeclarator() != null)
        {
            node.getFunctionDeclarator().apply(this);
        }
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        outAIdentifierFunctionDeclaration(node);
    }

    public void inAPointerFunctionDeclarator(APointerFunctionDeclarator node)
    {
        defaultIn(node);
    }

    public void outAPointerFunctionDeclarator(APointerFunctionDeclarator node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPointerFunctionDeclarator(APointerFunctionDeclarator node)
    {
        inAPointerFunctionDeclarator(node);
        if(node.getPointerFunction() != null)
        {
            node.getPointerFunction().apply(this);
        }
        outAPointerFunctionDeclarator(node);
    }

    public void inADirectFunctionDeclarator(ADirectFunctionDeclarator node)
    {
        defaultIn(node);
    }

    public void outADirectFunctionDeclarator(ADirectFunctionDeclarator node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADirectFunctionDeclarator(ADirectFunctionDeclarator node)
    {
        inADirectFunctionDeclarator(node);
        if(node.getDirectFunctionDeclarator() != null)
        {
            node.getDirectFunctionDeclarator().apply(this);
        }
        outADirectFunctionDeclarator(node);
    }

    public void inADirectPointerFunction(ADirectPointerFunction node)
    {
        defaultIn(node);
    }

    public void outADirectPointerFunction(ADirectPointerFunction node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADirectPointerFunction(ADirectPointerFunction node)
    {
        inADirectPointerFunction(node);
        if(node.getAtribuicao() != null)
        {
            node.getAtribuicao().apply(this);
        }
        if(node.getDirectFunctionDeclarator() != null)
        {
            node.getDirectFunctionDeclarator().apply(this);
        }
        outADirectPointerFunction(node);
    }

    public void inAPointerPointerFunction(APointerPointerFunction node)
    {
        defaultIn(node);
    }

    public void outAPointerPointerFunction(APointerPointerFunction node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPointerPointerFunction(APointerPointerFunction node)
    {
        inAPointerPointerFunction(node);
        if(node.getAtribuicao() != null)
        {
            node.getAtribuicao().apply(this);
        }
        if(node.getPointerFunction() != null)
        {
            node.getPointerFunction().apply(this);
        }
        outAPointerPointerFunction(node);
    }

    public void inAIdentifierDirectFunctionDeclarator(AIdentifierDirectFunctionDeclarator node)
    {
        defaultIn(node);
    }

    public void outAIdentifierDirectFunctionDeclarator(AIdentifierDirectFunctionDeclarator node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIdentifierDirectFunctionDeclarator(AIdentifierDirectFunctionDeclarator node)
    {
        inAIdentifierDirectFunctionDeclarator(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getParameterList() != null)
        {
            node.getParameterList().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        outAIdentifierDirectFunctionDeclarator(node);
    }

    public void inAFunctionDirectFunctionDeclarator(AFunctionDirectFunctionDeclarator node)
    {
        defaultIn(node);
    }

    public void outAFunctionDirectFunctionDeclarator(AFunctionDirectFunctionDeclarator node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFunctionDirectFunctionDeclarator(AFunctionDirectFunctionDeclarator node)
    {
        inAFunctionDirectFunctionDeclarator(node);
        if(node.getPlp() != null)
        {
            node.getPlp().apply(this);
        }
        if(node.getPointerFunction() != null)
        {
            node.getPointerFunction().apply(this);
        }
        if(node.getPrp() != null)
        {
            node.getPrp().apply(this);
        }
        if(node.getPllp() != null)
        {
            node.getPllp().apply(this);
        }
        if(node.getParameterList() != null)
        {
            node.getParameterList().apply(this);
        }
        if(node.getPlrp() != null)
        {
            node.getPlrp().apply(this);
        }
        outAFunctionDirectFunctionDeclarator(node);
    }

    public void inAParameterList(AParameterList node)
    {
        defaultIn(node);
    }

    public void outAParameterList(AParameterList node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParameterList(AParameterList node)
    {
        inAParameterList(node);
        if(node.getParameterDeclaration() != null)
        {
            node.getParameterDeclaration().apply(this);
        }
        {
            List<PParameterListTail> copy = new ArrayList<PParameterListTail>(node.getParameterListTail());
            for(PParameterListTail e : copy)
            {
                e.apply(this);
            }
        }
        outAParameterList(node);
    }

    public void inAParameterListTail(AParameterListTail node)
    {
        defaultIn(node);
    }

    public void outAParameterListTail(AParameterListTail node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParameterListTail(AParameterListTail node)
    {
        inAParameterListTail(node);
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        if(node.getParameterDeclaration() != null)
        {
            node.getParameterDeclaration().apply(this);
        }
        outAParameterListTail(node);
    }

    public void inAParameterDeclaration(AParameterDeclaration node)
    {
        defaultIn(node);
    }

    public void outAParameterDeclaration(AParameterDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParameterDeclaration(AParameterDeclaration node)
    {
        inAParameterDeclaration(node);
        if(node.getType() != null)
        {
            node.getType().apply(this);
        }
        if(node.getValor() != null)
        {
            node.getValor().apply(this);
        }
        outAParameterDeclaration(node);
    }
}
