/* This file was generated by SableCC (http://www.sablecc.org/). */

package prefixa.analysis;

import java.util.*;
import prefixa.node.*;

public class DepthFirstAdapter extends AnalysisAdapter
{
    public void inStart(Start node)
    {
        defaultIn(node);
    }

    public void outStart(Start node)
    {
        defaultOut(node);
    }

    public void defaultIn(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    public void defaultOut(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    @Override
    public void caseStart(Start node)
    {
        inStart(node);
        node.getPPrograma().apply(this);
        node.getEOF().apply(this);
        outStart(node);
    }

    public void inAPrograma(APrograma node)
    {
        defaultIn(node);
    }

    public void outAPrograma(APrograma node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPrograma(APrograma node)
    {
        inAPrograma(node);
        {
            List<PDeclVar> copy = new ArrayList<PDeclVar>(node.getDeclVar());
            for(PDeclVar e : copy)
            {
                e.apply(this);
            }
        }
        {
            List<PDeclFunc> copy = new ArrayList<PDeclFunc>(node.getDeclFunc());
            for(PDeclFunc e : copy)
            {
                e.apply(this);
            }
        }
        outAPrograma(node);
    }

    public void inADeclFunc(ADeclFunc node)
    {
        defaultIn(node);
    }

    public void outADeclFunc(ADeclFunc node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADeclFunc(ADeclFunc node)
    {
        inADeclFunc(node);
        if(node.getTipoRetornoFunc() != null)
        {
            node.getTipoRetornoFunc().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getDeclParametros() != null)
        {
            node.getDeclParametros().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getBlocoFuncao() != null)
        {
            node.getBlocoFuncao().apply(this);
        }
        outADeclFunc(node);
    }

    public void inADeclParametros(ADeclParametros node)
    {
        defaultIn(node);
    }

    public void outADeclParametros(ADeclParametros node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADeclParametros(ADeclParametros node)
    {
        inADeclParametros(node);
        if(node.getDeclParametro() != null)
        {
            node.getDeclParametro().apply(this);
        }
        {
            List<PDeclParamAdicional> copy = new ArrayList<PDeclParamAdicional>(node.getDeclParamAdicional());
            for(PDeclParamAdicional e : copy)
            {
                e.apply(this);
            }
        }
        outADeclParametros(node);
    }

    public void inADeclParamAdicional(ADeclParamAdicional node)
    {
        defaultIn(node);
    }

    public void outADeclParamAdicional(ADeclParamAdicional node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADeclParamAdicional(ADeclParamAdicional node)
    {
        inADeclParamAdicional(node);
        if(node.getBarraId() != null)
        {
            node.getBarraId().apply(this);
        }
        if(node.getDeclParametro() != null)
        {
            node.getDeclParametro().apply(this);
        }
        outADeclParamAdicional(node);
    }

    public void inADeclParametro(ADeclParametro node)
    {
        defaultIn(node);
    }

    public void outADeclParametro(ADeclParametro node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADeclParametro(ADeclParametro node)
    {
        inADeclParametro(node);
        if(node.getTipo() != null)
        {
            node.getTipo().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outADeclParametro(node);
    }

    public void inAParametros(AParametros node)
    {
        defaultIn(node);
    }

    public void outAParametros(AParametros node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParametros(AParametros node)
    {
        inAParametros(node);
        if(node.getStmt() != null)
        {
            node.getStmt().apply(this);
        }
        {
            List<PParamAdicional> copy = new ArrayList<PParamAdicional>(node.getParamAdicional());
            for(PParamAdicional e : copy)
            {
                e.apply(this);
            }
        }
        outAParametros(node);
    }

    public void inAParamAdicional(AParamAdicional node)
    {
        defaultIn(node);
    }

    public void outAParamAdicional(AParamAdicional node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParamAdicional(AParamAdicional node)
    {
        inAParamAdicional(node);
        if(node.getBarraId() != null)
        {
            node.getBarraId().apply(this);
        }
        if(node.getStmt() != null)
        {
            node.getStmt().apply(this);
        }
        outAParamAdicional(node);
    }

    public void inATipoTipoRetornoFunc(ATipoTipoRetornoFunc node)
    {
        defaultIn(node);
    }

    public void outATipoTipoRetornoFunc(ATipoTipoRetornoFunc node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATipoTipoRetornoFunc(ATipoTipoRetornoFunc node)
    {
        inATipoTipoRetornoFunc(node);
        if(node.getTipo() != null)
        {
            node.getTipo().apply(this);
        }
        outATipoTipoRetornoFunc(node);
    }

    public void inANoneTipoRetornoFunc(ANoneTipoRetornoFunc node)
    {
        defaultIn(node);
    }

    public void outANoneTipoRetornoFunc(ANoneTipoRetornoFunc node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANoneTipoRetornoFunc(ANoneTipoRetornoFunc node)
    {
        inANoneTipoRetornoFunc(node);
        if(node.getNoneId() != null)
        {
            node.getNoneId().apply(this);
        }
        outANoneTipoRetornoFunc(node);
    }

    public void inADeclVar(ADeclVar node)
    {
        defaultIn(node);
    }

    public void outADeclVar(ADeclVar node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADeclVar(ADeclVar node)
    {
        inADeclVar(node);
        if(node.getTipo() != null)
        {
            node.getTipo().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        {
            List<PIdAdicional> copy = new ArrayList<PIdAdicional>(node.getIdAdicional());
            for(PIdAdicional e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        outADeclVar(node);
    }

    public void inAIdAdicional(AIdAdicional node)
    {
        defaultIn(node);
    }

    public void outAIdAdicional(AIdAdicional node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIdAdicional(AIdAdicional node)
    {
        inAIdAdicional(node);
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outAIdAdicional(node);
    }

    public void inATipoBaseTipo(ATipoBaseTipo node)
    {
        defaultIn(node);
    }

    public void outATipoBaseTipo(ATipoBaseTipo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATipoBaseTipo(ATipoBaseTipo node)
    {
        inATipoBaseTipo(node);
        if(node.getTipoBase() != null)
        {
            node.getTipoBase().apply(this);
        }
        outATipoBaseTipo(node);
    }

    public void inAVectorTipo(AVectorTipo node)
    {
        defaultIn(node);
    }

    public void outAVectorTipo(AVectorTipo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVectorTipo(AVectorTipo node)
    {
        inAVectorTipo(node);
        if(node.getVectorId() != null)
        {
            node.getVectorId().apply(this);
        }
        if(node.getTipoBase() != null)
        {
            node.getTipoBase().apply(this);
        }
        if(node.getLBracket() != null)
        {
            node.getLBracket().apply(this);
        }
        if(node.getStmt() != null)
        {
            node.getStmt().apply(this);
        }
        if(node.getRBracket() != null)
        {
            node.getRBracket().apply(this);
        }
        outAVectorTipo(node);
    }

    public void inAIntTipoBase(AIntTipoBase node)
    {
        defaultIn(node);
    }

    public void outAIntTipoBase(AIntTipoBase node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIntTipoBase(AIntTipoBase node)
    {
        inAIntTipoBase(node);
        if(node.getIntId() != null)
        {
            node.getIntId().apply(this);
        }
        outAIntTipoBase(node);
    }

    public void inACharTipoBase(ACharTipoBase node)
    {
        defaultIn(node);
    }

    public void outACharTipoBase(ACharTipoBase node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACharTipoBase(ACharTipoBase node)
    {
        inACharTipoBase(node);
        if(node.getCharId() != null)
        {
            node.getCharId().apply(this);
        }
        outACharTipoBase(node);
    }

    public void inABoolTipoBase(ABoolTipoBase node)
    {
        defaultIn(node);
    }

    public void outABoolTipoBase(ABoolTipoBase node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABoolTipoBase(ABoolTipoBase node)
    {
        inABoolTipoBase(node);
        if(node.getBoolId() != null)
        {
            node.getBoolId().apply(this);
        }
        outABoolTipoBase(node);
    }

    public void inAComandoAtrib(AComandoAtrib node)
    {
        defaultIn(node);
    }

    public void outAComandoAtrib(AComandoAtrib node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAComandoAtrib(AComandoAtrib node)
    {
        inAComandoAtrib(node);
        if(node.getVar() != null)
        {
            node.getVar().apply(this);
        }
        if(node.getAtribuicao() != null)
        {
            node.getAtribuicao().apply(this);
        }
        if(node.getStmt() != null)
        {
            node.getStmt().apply(this);
        }
        outAComandoAtrib(node);
    }

    public void inAIntValor(AIntValor node)
    {
        defaultIn(node);
    }

    public void outAIntValor(AIntValor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIntValor(AIntValor node)
    {
        inAIntValor(node);
        if(node.getIntType() != null)
        {
            node.getIntType().apply(this);
        }
        outAIntValor(node);
    }

    public void inARealValor(ARealValor node)
    {
        defaultIn(node);
    }

    public void outARealValor(ARealValor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARealValor(ARealValor node)
    {
        inARealValor(node);
        if(node.getRealType() != null)
        {
            node.getRealType().apply(this);
        }
        outARealValor(node);
    }

    public void inABoolValor(ABoolValor node)
    {
        defaultIn(node);
    }

    public void outABoolValor(ABoolValor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABoolValor(ABoolValor node)
    {
        inABoolValor(node);
        if(node.getBoolType() != null)
        {
            node.getBoolType().apply(this);
        }
        outABoolValor(node);
    }

    public void inAVarValor(AVarValor node)
    {
        defaultIn(node);
    }

    public void outAVarValor(AVarValor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVarValor(AVarValor node)
    {
        inAVarValor(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outAVarValor(node);
    }

    public void inAOpStmt(AOpStmt node)
    {
        defaultIn(node);
    }

    public void outAOpStmt(AOpStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOpStmt(AOpStmt node)
    {
        inAOpStmt(node);
        if(node.getOpr() != null)
        {
            node.getOpr().apply(this);
        }
        outAOpStmt(node);
    }

    public void inAExpUnStmt(AExpUnStmt node)
    {
        defaultIn(node);
    }

    public void outAExpUnStmt(AExpUnStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpUnStmt(AExpUnStmt node)
    {
        inAExpUnStmt(node);
        if(node.getExpUn() != null)
        {
            node.getExpUn().apply(this);
        }
        outAExpUnStmt(node);
    }

    public void inAMaisOpr(AMaisOpr node)
    {
        defaultIn(node);
    }

    public void outAMaisOpr(AMaisOpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMaisOpr(AMaisOpr node)
    {
        inAMaisOpr(node);
        if(node.getSoma() != null)
        {
            node.getSoma().apply(this);
        }
        if(node.getStmt() != null)
        {
            node.getStmt().apply(this);
        }
        if(node.getStmtL() != null)
        {
            node.getStmtL().apply(this);
        }
        outAMaisOpr(node);
    }

    public void inAMenosOpr(AMenosOpr node)
    {
        defaultIn(node);
    }

    public void outAMenosOpr(AMenosOpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMenosOpr(AMenosOpr node)
    {
        inAMenosOpr(node);
        if(node.getMenos() != null)
        {
            node.getMenos().apply(this);
        }
        if(node.getStmt() != null)
        {
            node.getStmt().apply(this);
        }
        if(node.getStmtL() != null)
        {
            node.getStmtL().apply(this);
        }
        outAMenosOpr(node);
    }

    public void inAVezesOpr(AVezesOpr node)
    {
        defaultIn(node);
    }

    public void outAVezesOpr(AVezesOpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVezesOpr(AVezesOpr node)
    {
        inAVezesOpr(node);
        if(node.getMult() != null)
        {
            node.getMult().apply(this);
        }
        if(node.getStmt() != null)
        {
            node.getStmt().apply(this);
        }
        if(node.getStmtL() != null)
        {
            node.getStmtL().apply(this);
        }
        outAVezesOpr(node);
    }

    public void inAFracOpr(AFracOpr node)
    {
        defaultIn(node);
    }

    public void outAFracOpr(AFracOpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFracOpr(AFracOpr node)
    {
        inAFracOpr(node);
        if(node.getDiv() != null)
        {
            node.getDiv().apply(this);
        }
        if(node.getStmt() != null)
        {
            node.getStmt().apply(this);
        }
        if(node.getStmtL() != null)
        {
            node.getStmtL().apply(this);
        }
        outAFracOpr(node);
    }

    public void inAIgualOpr(AIgualOpr node)
    {
        defaultIn(node);
    }

    public void outAIgualOpr(AIgualOpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIgualOpr(AIgualOpr node)
    {
        inAIgualOpr(node);
        if(node.getIgualQue() != null)
        {
            node.getIgualQue().apply(this);
        }
        if(node.getStmt() != null)
        {
            node.getStmt().apply(this);
        }
        if(node.getStmtL() != null)
        {
            node.getStmtL().apply(this);
        }
        outAIgualOpr(node);
    }

    public void inAMeigualOpr(AMeigualOpr node)
    {
        defaultIn(node);
    }

    public void outAMeigualOpr(AMeigualOpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMeigualOpr(AMeigualOpr node)
    {
        inAMeigualOpr(node);
        if(node.getMenorIgualQue() != null)
        {
            node.getMenorIgualQue().apply(this);
        }
        if(node.getStmt() != null)
        {
            node.getStmt().apply(this);
        }
        if(node.getStmtL() != null)
        {
            node.getStmtL().apply(this);
        }
        outAMeigualOpr(node);
    }

    public void inAMaigualOpr(AMaigualOpr node)
    {
        defaultIn(node);
    }

    public void outAMaigualOpr(AMaigualOpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMaigualOpr(AMaigualOpr node)
    {
        inAMaigualOpr(node);
        if(node.getMaiorIgualQue() != null)
        {
            node.getMaiorIgualQue().apply(this);
        }
        if(node.getStmt() != null)
        {
            node.getStmt().apply(this);
        }
        if(node.getStmtL() != null)
        {
            node.getStmtL().apply(this);
        }
        outAMaigualOpr(node);
    }

    public void inAMenorOpr(AMenorOpr node)
    {
        defaultIn(node);
    }

    public void outAMenorOpr(AMenorOpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMenorOpr(AMenorOpr node)
    {
        inAMenorOpr(node);
        if(node.getMenorQue() != null)
        {
            node.getMenorQue().apply(this);
        }
        if(node.getStmt() != null)
        {
            node.getStmt().apply(this);
        }
        if(node.getStmtL() != null)
        {
            node.getStmtL().apply(this);
        }
        outAMenorOpr(node);
    }

    public void inAMaiorOpr(AMaiorOpr node)
    {
        defaultIn(node);
    }

    public void outAMaiorOpr(AMaiorOpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMaiorOpr(AMaiorOpr node)
    {
        inAMaiorOpr(node);
        if(node.getMaiorQue() != null)
        {
            node.getMaiorQue().apply(this);
        }
        if(node.getStmt() != null)
        {
            node.getStmt().apply(this);
        }
        if(node.getStmtL() != null)
        {
            node.getStmtL().apply(this);
        }
        outAMaiorOpr(node);
    }

    public void inAAndOpr(AAndOpr node)
    {
        defaultIn(node);
    }

    public void outAAndOpr(AAndOpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAndOpr(AAndOpr node)
    {
        inAAndOpr(node);
        if(node.getAndId() != null)
        {
            node.getAndId().apply(this);
        }
        if(node.getStmt() != null)
        {
            node.getStmt().apply(this);
        }
        if(node.getStmtL() != null)
        {
            node.getStmtL().apply(this);
        }
        outAAndOpr(node);
    }

    public void inAOrOpr(AOrOpr node)
    {
        defaultIn(node);
    }

    public void outAOrOpr(AOrOpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOrOpr(AOrOpr node)
    {
        inAOrOpr(node);
        if(node.getOrId() != null)
        {
            node.getOrId().apply(this);
        }
        if(node.getStmt() != null)
        {
            node.getStmt().apply(this);
        }
        if(node.getStmtL() != null)
        {
            node.getStmtL().apply(this);
        }
        outAOrOpr(node);
    }

    public void inANotOpr(ANotOpr node)
    {
        defaultIn(node);
    }

    public void outANotOpr(ANotOpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANotOpr(ANotOpr node)
    {
        inANotOpr(node);
        if(node.getNotId() != null)
        {
            node.getNotId().apply(this);
        }
        if(node.getStmt() != null)
        {
            node.getStmt().apply(this);
        }
        outANotOpr(node);
    }

    public void inANomevarExpUn(ANomevarExpUn node)
    {
        defaultIn(node);
    }

    public void outANomevarExpUn(ANomevarExpUn node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANomevarExpUn(ANomevarExpUn node)
    {
        inANomevarExpUn(node);
        if(node.getVar() != null)
        {
            node.getVar().apply(this);
        }
        outANomevarExpUn(node);
    }

    public void inAChamadaExpUn(AChamadaExpUn node)
    {
        defaultIn(node);
    }

    public void outAChamadaExpUn(AChamadaExpUn node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAChamadaExpUn(AChamadaExpUn node)
    {
        inAChamadaExpUn(node);
        if(node.getChamada() != null)
        {
            node.getChamada().apply(this);
        }
        outAChamadaExpUn(node);
    }

    public void inAConstanExpUn(AConstanExpUn node)
    {
        defaultIn(node);
    }

    public void outAConstanExpUn(AConstanExpUn node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAConstanExpUn(AConstanExpUn node)
    {
        inAConstanExpUn(node);
        if(node.getConstante() != null)
        {
            node.getConstante().apply(this);
        }
        outAConstanExpUn(node);
    }

    public void inAChamada(AChamada node)
    {
        defaultIn(node);
    }

    public void outAChamada(AChamada node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAChamada(AChamada node)
    {
        inAChamada(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getParametros() != null)
        {
            node.getParametros().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        outAChamada(node);
    }

    public void inAVetorVar(AVetorVar node)
    {
        defaultIn(node);
    }

    public void outAVetorVar(AVetorVar node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVetorVar(AVetorVar node)
    {
        inAVetorVar(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getLBracket() != null)
        {
            node.getLBracket().apply(this);
        }
        if(node.getStmt() != null)
        {
            node.getStmt().apply(this);
        }
        if(node.getRBracket() != null)
        {
            node.getRBracket().apply(this);
        }
        outAVetorVar(node);
    }

    public void inAIdVar(AIdVar node)
    {
        defaultIn(node);
    }

    public void outAIdVar(AIdVar node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIdVar(AIdVar node)
    {
        inAIdVar(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outAIdVar(node);
    }

    public void inAIfComando(AIfComando node)
    {
        defaultIn(node);
    }

    public void outAIfComando(AIfComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIfComando(AIfComando node)
    {
        inAIfComando(node);
        if(node.getIfId() != null)
        {
            node.getIfId().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getStmt() != null)
        {
            node.getStmt().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getComando() != null)
        {
            node.getComando().apply(this);
        }
        if(node.getElseId() != null)
        {
            node.getElseId().apply(this);
        }
        if(node.getElsecomando() != null)
        {
            node.getElsecomando().apply(this);
        }
        outAIfComando(node);
    }

    public void inAWhileComando(AWhileComando node)
    {
        defaultIn(node);
    }

    public void outAWhileComando(AWhileComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAWhileComando(AWhileComando node)
    {
        inAWhileComando(node);
        if(node.getWhile() != null)
        {
            node.getWhile().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getStmt() != null)
        {
            node.getStmt().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getComando() != null)
        {
            node.getComando().apply(this);
        }
        outAWhileComando(node);
    }

    public void inAForeachComando(AForeachComando node)
    {
        defaultIn(node);
    }

    public void outAForeachComando(AForeachComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAForeachComando(AForeachComando node)
    {
        inAForeachComando(node);
        if(node.getForeach() != null)
        {
            node.getForeach().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getTipo() != null)
        {
            node.getTipo().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getDoubleDot() != null)
        {
            node.getDoubleDot().apply(this);
        }
        if(node.getVectorid() != null)
        {
            node.getVectorid().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getComando() != null)
        {
            node.getComando().apply(this);
        }
        outAForeachComando(node);
    }

    public void inABlocoComando(ABlocoComando node)
    {
        defaultIn(node);
    }

    public void outABlocoComando(ABlocoComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABlocoComando(ABlocoComando node)
    {
        inABlocoComando(node);
        if(node.getBloco() != null)
        {
            node.getBloco().apply(this);
        }
        outABlocoComando(node);
    }

    public void inASendbackComando(ASendbackComando node)
    {
        defaultIn(node);
    }

    public void outASendbackComando(ASendbackComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASendbackComando(ASendbackComando node)
    {
        inASendbackComando(node);
        if(node.getExpReturn() != null)
        {
            node.getExpReturn().apply(this);
        }
        outASendbackComando(node);
    }

    public void inAPatribComando(APatribComando node)
    {
        defaultIn(node);
    }

    public void outAPatribComando(APatribComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPatribComando(APatribComando node)
    {
        inAPatribComando(node);
        if(node.getComandoAtrib() != null)
        {
            node.getComandoAtrib().apply(this);
        }
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        outAPatribComando(node);
    }

    public void inAChamadaComando(AChamadaComando node)
    {
        defaultIn(node);
    }

    public void outAChamadaComando(AChamadaComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAChamadaComando(AChamadaComando node)
    {
        inAChamadaComando(node);
        if(node.getChamada() != null)
        {
            node.getChamada().apply(this);
        }
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        outAChamadaComando(node);
    }

    public void inABloco(ABloco node)
    {
        defaultIn(node);
    }

    public void outABloco(ABloco node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABloco(ABloco node)
    {
        inABloco(node);
        if(node.getStartBlockId() != null)
        {
            node.getStartBlockId().apply(this);
        }
        {
            List<PDeclVar> copy = new ArrayList<PDeclVar>(node.getDeclVar());
            for(PDeclVar e : copy)
            {
                e.apply(this);
            }
        }
        {
            List<PComando> copy = new ArrayList<PComando>(node.getComando());
            for(PComando e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getEndBlockId() != null)
        {
            node.getEndBlockId().apply(this);
        }
        outABloco(node);
    }

    public void inABlocoFuncao(ABlocoFuncao node)
    {
        defaultIn(node);
    }

    public void outABlocoFuncao(ABlocoFuncao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABlocoFuncao(ABlocoFuncao node)
    {
        inABlocoFuncao(node);
        if(node.getStartBlockId() != null)
        {
            node.getStartBlockId().apply(this);
        }
        {
            List<PDeclVar> copy = new ArrayList<PDeclVar>(node.getDeclVar());
            for(PDeclVar e : copy)
            {
                e.apply(this);
            }
        }
        {
            List<PComando> copy = new ArrayList<PComando>(node.getComando());
            for(PComando e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getExpReturn() != null)
        {
            node.getExpReturn().apply(this);
        }
        if(node.getEndBlockId() != null)
        {
            node.getEndBlockId().apply(this);
        }
        outABlocoFuncao(node);
    }

    public void inAExpReturn(AExpReturn node)
    {
        defaultIn(node);
    }

    public void outAExpReturn(AExpReturn node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpReturn(AExpReturn node)
    {
        inAExpReturn(node);
        if(node.getReturn() != null)
        {
            node.getReturn().apply(this);
        }
        if(node.getStmt() != null)
        {
            node.getStmt().apply(this);
        }
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        outAExpReturn(node);
    }

    public void inAIntdecConstante(AIntdecConstante node)
    {
        defaultIn(node);
    }

    public void outAIntdecConstante(AIntdecConstante node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIntdecConstante(AIntdecConstante node)
    {
        inAIntdecConstante(node);
        if(node.getNumber() != null)
        {
            node.getNumber().apply(this);
        }
        outAIntdecConstante(node);
    }

    public void inAIntbinConstante(AIntbinConstante node)
    {
        defaultIn(node);
    }

    public void outAIntbinConstante(AIntbinConstante node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIntbinConstante(AIntbinConstante node)
    {
        inAIntbinConstante(node);
        if(node.getNumeroBin() != null)
        {
            node.getNumeroBin().apply(this);
        }
        outAIntbinConstante(node);
    }

    public void inAInthexConstante(AInthexConstante node)
    {
        defaultIn(node);
    }

    public void outAInthexConstante(AInthexConstante node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAInthexConstante(AInthexConstante node)
    {
        inAInthexConstante(node);
        if(node.getHexNumber() != null)
        {
            node.getHexNumber().apply(this);
        }
        outAInthexConstante(node);
    }

    public void inACharConstante(ACharConstante node)
    {
        defaultIn(node);
    }

    public void outACharConstante(ACharConstante node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACharConstante(ACharConstante node)
    {
        inACharConstante(node);
        if(node.getCharVar() != null)
        {
            node.getCharVar().apply(this);
        }
        outACharConstante(node);
    }

    public void inAStringConstante(AStringConstante node)
    {
        defaultIn(node);
    }

    public void outAStringConstante(AStringConstante node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStringConstante(AStringConstante node)
    {
        inAStringConstante(node);
        if(node.getString() != null)
        {
            node.getString().apply(this);
        }
        outAStringConstante(node);
    }

    public void inABooltrueConstante(ABooltrueConstante node)
    {
        defaultIn(node);
    }

    public void outABooltrueConstante(ABooltrueConstante node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABooltrueConstante(ABooltrueConstante node)
    {
        inABooltrueConstante(node);
        if(node.getTrueId() != null)
        {
            node.getTrueId().apply(this);
        }
        outABooltrueConstante(node);
    }

    public void inABoolfalseConstante(ABoolfalseConstante node)
    {
        defaultIn(node);
    }

    public void outABoolfalseConstante(ABoolfalseConstante node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABoolfalseConstante(ABoolfalseConstante node)
    {
        inABoolfalseConstante(node);
        if(node.getFalseId() != null)
        {
            node.getFalseId().apply(this);
        }
        outABoolfalseConstante(node);
    }
}
