/* This file was generated by SableCC (http://www.sablecc.org/). */

package prefixa.analysis;

import prefixa.node.*;

public interface Analysis extends Switch
{
    Object getIn(Node node);
    void setIn(Node node, Object o);
    Object getOut(Node node);
    void setOut(Node node, Object o);

    void caseStart(Start node);
    void caseAIntType(AIntType node);
    void caseABoolType(ABoolType node);
    void caseARealType(ARealType node);
    void caseACharType(ACharType node);
    void caseAIntValor(AIntValor node);
    void caseARealValor(ARealValor node);
    void caseABoolValor(ABoolValor node);
    void caseAVarValor(AVarValor node);
    void caseAUnicoTypeList(AUnicoTypeList node);
    void caseAVariosTypeList(AVariosTypeList node);
    void caseAIfCondicional(AIfCondicional node);
    void caseAIfelseCondicional(AIfelseCondicional node);
    void caseACondicao(ACondicao node);
    void caseAEqCondicao(AEqCondicao node);
    void caseAMqCondicao(AMqCondicao node);
    void caseAMnCondicao(AMnCondicao node);
    void caseAMneqCondicao(AMneqCondicao node);
    void caseAMaeqCondicao(AMaeqCondicao node);
    void caseANegCondicao(ANegCondicao node);
    void caseAAndCondicao(AAndCondicao node);
    void caseAOrCondicao(AOrCondicao node);
    void caseACondCondicao(ACondCondicao node);
    void caseAEqIgual(AEqIgual node);
    void caseAMqMaior(AMqMaior node);
    void caseAMnMenor(AMnMenor node);
    void caseAMneqMenorIgual(AMneqMenorIgual node);
    void caseAMaeqMaiorIgual(AMaeqMaiorIgual node);
    void caseAAndAnd(AAndAnd node);
    void caseAOrOr(AOrOr node);
    void caseABlocoBloco(ABlocoBloco node);
    void caseAFunctionDeclaration(AFunctionDeclaration node);
    void caseAIdentifierFunctionDeclaration(AIdentifierFunctionDeclaration node);
    void caseAPointerFunctionDeclarator(APointerFunctionDeclarator node);
    void caseADirectFunctionDeclarator(ADirectFunctionDeclarator node);
    void caseADirectPointerFunction(ADirectPointerFunction node);
    void caseAPointerPointerFunction(APointerPointerFunction node);
    void caseAIdentifierDirectFunctionDeclarator(AIdentifierDirectFunctionDeclarator node);
    void caseAFunctionDirectFunctionDeclarator(AFunctionDirectFunctionDeclarator node);
    void caseAParameterList(AParameterList node);
    void caseAParameterListTail(AParameterListTail node);
    void caseAParameterDeclaration(AParameterDeclaration node);

    void caseTVazio(TVazio node);
    void caseTAtribuicao(TAtribuicao node);
    void caseTCharId(TCharId node);
    void caseTIntId(TIntId node);
    void caseTBoolId(TBoolId node);
    void caseTRealId(TRealId node);
    void caseTIfId(TIfId node);
    void caseTElseId(TElseId node);
    void caseTStartBlockId(TStartBlockId node);
    void caseTEndBlockId(TEndBlockId node);
    void caseTNotId(TNotId node);
    void caseTAndId(TAndId node);
    void caseTOrId(TOrId node);
    void caseTComma(TComma node);
    void caseTSoma(TSoma node);
    void caseTMenos(TMenos node);
    void caseTMult(TMult node);
    void caseTDiv(TDiv node);
    void caseTMod(TMod node);
    void caseTParEsq(TParEsq node);
    void caseTParDir(TParDir node);
    void caseTDoubleDot(TDoubleDot node);
    void caseTBoolType(TBoolType node);
    void caseTWhile(TWhile node);
    void caseTDo(TDo node);
    void caseTFor(TFor node);
    void caseTEach(TEach node);
    void caseTLPar(TLPar node);
    void caseTRPar(TRPar node);
    void caseTLBracket(TLBracket node);
    void caseTRBracket(TRBracket node);
    void caseTLBrace(TLBrace node);
    void caseTRBrace(TRBrace node);
    void caseTIgualQue(TIgualQue node);
    void caseTMenorQue(TMenorQue node);
    void caseTMenorIgualQue(TMenorIgualQue node);
    void caseTMaiorQue(TMaiorQue node);
    void caseTMaiorIgualQue(TMaiorIgualQue node);
    void caseTSemicolon(TSemicolon node);
    void caseTScan(TScan node);
    void caseTPrint(TPrint node);
    void caseTString(TString node);
    void caseTComments(TComments node);
    void caseTLongComment(TLongComment node);
    void caseTIntType(TIntType node);
    void caseTRealType(TRealType node);
    void caseTIdentifier(TIdentifier node);
    void caseEOF(EOF node);
}
