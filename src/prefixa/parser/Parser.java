/* This file was generated by SableCC (http://www.sablecc.org/). */

package prefixa.parser;

import prefixa.lexer.*;
import prefixa.node.*;
import prefixa.analysis.*;
import java.util.*;

import java.io.DataInputStream;
import java.io.BufferedInputStream;
import java.io.IOException;

@SuppressWarnings("nls")
public class Parser
{
    public final Analysis ignoredTokens = new AnalysisAdapter();

    protected ArrayList nodeList;

    private final Lexer lexer;
    private final ListIterator stack = new LinkedList().listIterator();
    private int last_pos;
    private int last_line;
    private Token last_token;
    private final TokenIndex converter = new TokenIndex();
    private final int[] action = new int[2];

    private final static int SHIFT = 0;
    private final static int REDUCE = 1;
    private final static int ACCEPT = 2;
    private final static int ERROR = 3;

    public Parser(@SuppressWarnings("hiding") Lexer lexer)
    {
        this.lexer = lexer;
    }

    protected void filter() throws ParserException, LexerException, IOException
    {
        // Empty body
    }

    private void push(int numstate, ArrayList listNode, boolean hidden) throws ParserException, LexerException, IOException
    {
        this.nodeList = listNode;

        if(!hidden)
        {
            filter();
        }

        if(!this.stack.hasNext())
        {
            this.stack.add(new State(numstate, this.nodeList));
            return;
        }

        State s = (State) this.stack.next();
        s.state = numstate;
        s.nodes = this.nodeList;
    }

    private int goTo(int index)
    {
        int state = state();
        int low = 1;
        int high = gotoTable[index].length - 1;
        int value = gotoTable[index][0][1];

        while(low <= high)
        {
            int middle = (low + high) / 2;

            if(state < gotoTable[index][middle][0])
            {
                high = middle - 1;
            }
            else if(state > gotoTable[index][middle][0])
            {
                low = middle + 1;
            }
            else
            {
                value = gotoTable[index][middle][1];
                break;
            }
        }

        return value;
    }

    private int state()
    {
        State s = (State) this.stack.previous();
        this.stack.next();
        return s.state;
    }

    private ArrayList pop()
    {
        return ((State) this.stack.previous()).nodes;
    }

    private int index(Switchable token)
    {
        this.converter.index = -1;
        token.apply(this.converter);
        return this.converter.index;
    }

    @SuppressWarnings("unchecked")
    public Start parse() throws ParserException, LexerException, IOException
    {
        push(0, null, true);
        List<Node> ign = null;
        while(true)
        {
            while(index(this.lexer.peek()) == -1)
            {
                if(ign == null)
                {
                    ign = new LinkedList<Node>();
                }

                ign.add(this.lexer.next());
            }

            if(ign != null)
            {
                this.ignoredTokens.setIn(this.lexer.peek(), ign);
                ign = null;
            }

            this.last_pos = this.lexer.peek().getPos();
            this.last_line = this.lexer.peek().getLine();
            this.last_token = this.lexer.peek();

            int index = index(this.lexer.peek());
            this.action[0] = Parser.actionTable[state()][0][1];
            this.action[1] = Parser.actionTable[state()][0][2];

            int low = 1;
            int high = Parser.actionTable[state()].length - 1;

            while(low <= high)
            {
                int middle = (low + high) / 2;

                if(index < Parser.actionTable[state()][middle][0])
                {
                    high = middle - 1;
                }
                else if(index > Parser.actionTable[state()][middle][0])
                {
                    low = middle + 1;
                }
                else
                {
                    this.action[0] = Parser.actionTable[state()][middle][1];
                    this.action[1] = Parser.actionTable[state()][middle][2];
                    break;
                }
            }

            switch(this.action[0])
            {
                case SHIFT:
		    {
		        ArrayList list = new ArrayList();
		        list.add(this.lexer.next());
                        push(this.action[1], list, false);
                    }
		    break;
                case REDUCE:
                    switch(this.action[1])
                    {
                    case 0: /* reduce AIntType */
		    {
			ArrayList list = new0();
			push(goTo(0), list, false);
		    }
		    break;
                    case 1: /* reduce ABoolType */
		    {
			ArrayList list = new1();
			push(goTo(0), list, false);
		    }
		    break;
                    case 2: /* reduce ARealType */
		    {
			ArrayList list = new2();
			push(goTo(0), list, false);
		    }
		    break;
                    case 3: /* reduce ACharType */
		    {
			ArrayList list = new3();
			push(goTo(0), list, false);
		    }
		    break;
                    case 4: /* reduce AIntValor */
		    {
			ArrayList list = new4();
			push(goTo(1), list, false);
		    }
		    break;
                    case 5: /* reduce ARealValor */
		    {
			ArrayList list = new5();
			push(goTo(1), list, false);
		    }
		    break;
                    case 6: /* reduce ABoolValor */
		    {
			ArrayList list = new6();
			push(goTo(1), list, false);
		    }
		    break;
                    case 7: /* reduce AVarValor */
		    {
			ArrayList list = new7();
			push(goTo(1), list, false);
		    }
		    break;
                    case 8: /* reduce AUnicoTypeList */
		    {
			ArrayList list = new8();
			push(goTo(2), list, false);
		    }
		    break;
                    case 9: /* reduce AVariosTypeList */
		    {
			ArrayList list = new9();
			push(goTo(2), list, false);
		    }
		    break;
                    case 10: /* reduce AIfCondicional */
		    {
			ArrayList list = new10();
			push(goTo(3), list, false);
		    }
		    break;
                    case 11: /* reduce AIfelseCondicional */
		    {
			ArrayList list = new11();
			push(goTo(3), list, false);
		    }
		    break;
                    case 12: /* reduce ACondicao */
		    {
			ArrayList list = new12();
			push(goTo(4), list, false);
		    }
		    break;
                    case 13: /* reduce AEqCondicao */
		    {
			ArrayList list = new13();
			push(goTo(4), list, false);
		    }
		    break;
                    case 14: /* reduce AMqCondicao */
		    {
			ArrayList list = new14();
			push(goTo(4), list, false);
		    }
		    break;
                    case 15: /* reduce AMnCondicao */
		    {
			ArrayList list = new15();
			push(goTo(4), list, false);
		    }
		    break;
                    case 16: /* reduce AMneqCondicao */
		    {
			ArrayList list = new16();
			push(goTo(4), list, false);
		    }
		    break;
                    case 17: /* reduce AMaeqCondicao */
		    {
			ArrayList list = new17();
			push(goTo(4), list, false);
		    }
		    break;
                    case 18: /* reduce ANegCondicao */
		    {
			ArrayList list = new18();
			push(goTo(4), list, false);
		    }
		    break;
                    case 19: /* reduce AAndCondicao */
		    {
			ArrayList list = new19();
			push(goTo(4), list, false);
		    }
		    break;
                    case 20: /* reduce AOrCondicao */
		    {
			ArrayList list = new20();
			push(goTo(4), list, false);
		    }
		    break;
                    case 21: /* reduce ACondCondicao */
		    {
			ArrayList list = new21();
			push(goTo(4), list, false);
		    }
		    break;
                    case 22: /* reduce AEqIgual */
		    {
			ArrayList list = new22();
			push(goTo(5), list, false);
		    }
		    break;
                    case 23: /* reduce AMqMaior */
		    {
			ArrayList list = new23();
			push(goTo(6), list, false);
		    }
		    break;
                    case 24: /* reduce AMnMenor */
		    {
			ArrayList list = new24();
			push(goTo(7), list, false);
		    }
		    break;
                    case 25: /* reduce AMneqMenorIgual */
		    {
			ArrayList list = new25();
			push(goTo(8), list, false);
		    }
		    break;
                    case 26: /* reduce AMaeqMaiorIgual */
		    {
			ArrayList list = new26();
			push(goTo(9), list, false);
		    }
		    break;
                    case 27: /* reduce AAndAnd */
		    {
			ArrayList list = new27();
			push(goTo(10), list, false);
		    }
		    break;
                    case 28: /* reduce AOrOr */
		    {
			ArrayList list = new28();
			push(goTo(11), list, false);
		    }
		    break;
                    case 29: /* reduce ABlocoBloco */
		    {
			ArrayList list = new29();
			push(goTo(12), list, false);
		    }
		    break;
                    case 30: /* reduce AFunctionDeclaration */
		    {
			ArrayList list = new30();
			push(goTo(13), list, false);
		    }
		    break;
                    case 31: /* reduce AIdentifierFunctionDeclaration */
		    {
			ArrayList list = new31();
			push(goTo(13), list, false);
		    }
		    break;
                    case 32: /* reduce APointerFunctionDeclarator */
		    {
			ArrayList list = new32();
			push(goTo(14), list, false);
		    }
		    break;
                    case 33: /* reduce ADirectFunctionDeclarator */
		    {
			ArrayList list = new33();
			push(goTo(14), list, false);
		    }
		    break;
                    case 34: /* reduce ADirectPointerFunction */
		    {
			ArrayList list = new34();
			push(goTo(15), list, false);
		    }
		    break;
                    case 35: /* reduce APointerPointerFunction */
		    {
			ArrayList list = new35();
			push(goTo(15), list, false);
		    }
		    break;
                    case 36: /* reduce AAidentifierdirectfunctiondeclarator1DirectFunctionDeclarator */
		    {
			ArrayList list = new36();
			push(goTo(16), list, false);
		    }
		    break;
                    case 37: /* reduce AAidentifierdirectfunctiondeclarator2DirectFunctionDeclarator */
		    {
			ArrayList list = new37();
			push(goTo(16), list, false);
		    }
		    break;
                    case 38: /* reduce AAfunctiondirectfunctiondeclarator1DirectFunctionDeclarator */
		    {
			ArrayList list = new38();
			push(goTo(16), list, false);
		    }
		    break;
                    case 39: /* reduce AAfunctiondirectfunctiondeclarator2DirectFunctionDeclarator */
		    {
			ArrayList list = new39();
			push(goTo(16), list, false);
		    }
		    break;
                    case 40: /* reduce AAparameterlist1ParameterList */
		    {
			ArrayList list = new40();
			push(goTo(17), list, false);
		    }
		    break;
                    case 41: /* reduce AAparameterlist2ParameterList */
		    {
			ArrayList list = new41();
			push(goTo(17), list, false);
		    }
		    break;
                    case 42: /* reduce AParameterListTail */
		    {
			ArrayList list = new42();
			push(goTo(18), list, false);
		    }
		    break;
                    case 43: /* reduce AParameterDeclaration */
		    {
			ArrayList list = new43();
			push(goTo(19), list, false);
		    }
		    break;
                    case 44: /* reduce ATerminal$ParameterListTail */
		    {
			ArrayList list = new44();
			push(goTo(20), list, true);
		    }
		    break;
                    case 45: /* reduce ANonTerminal$ParameterListTail */
		    {
			ArrayList list = new45();
			push(goTo(20), list, true);
		    }
		    break;
                    }
                    break;
                case ACCEPT:
                    {
                        EOF node2 = (EOF) this.lexer.next();
                        PType node1 = (PType) pop().get(0);
                        Start node = new Start(node1, node2);
                        return node;
                    }
                case ERROR:
                    throw new ParserException(this.last_token,
                        "[" + this.last_line + "," + this.last_pos + "] " +
                        Parser.errorMessages[Parser.errors[this.action[1]]]);
            }
        }
    }



    @SuppressWarnings("unchecked")
    ArrayList new0() /* reduce AIntType */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PType ptypeNode1;
        {
            // Block
        TIntId tintidNode2;
        tintidNode2 = (TIntId)nodeArrayList1.get(0);

        ptypeNode1 = new AIntType(tintidNode2);
        }
	nodeList.add(ptypeNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new1() /* reduce ABoolType */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PType ptypeNode1;
        {
            // Block
        TBoolId tboolidNode2;
        tboolidNode2 = (TBoolId)nodeArrayList1.get(0);

        ptypeNode1 = new ABoolType(tboolidNode2);
        }
	nodeList.add(ptypeNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new2() /* reduce ARealType */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PType ptypeNode1;
        {
            // Block
        TRealId trealidNode2;
        trealidNode2 = (TRealId)nodeArrayList1.get(0);

        ptypeNode1 = new ARealType(trealidNode2);
        }
	nodeList.add(ptypeNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new3() /* reduce ACharType */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PType ptypeNode1;
        {
            // Block
        TCharId tcharidNode2;
        tcharidNode2 = (TCharId)nodeArrayList1.get(0);

        ptypeNode1 = new ACharType(tcharidNode2);
        }
	nodeList.add(ptypeNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new4() /* reduce AIntValor */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PValor pvalorNode1;
        {
            // Block
        TIntType tinttypeNode2;
        tinttypeNode2 = (TIntType)nodeArrayList1.get(0);

        pvalorNode1 = new AIntValor(tinttypeNode2);
        }
	nodeList.add(pvalorNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new5() /* reduce ARealValor */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PValor pvalorNode1;
        {
            // Block
        TRealType trealtypeNode2;
        trealtypeNode2 = (TRealType)nodeArrayList1.get(0);

        pvalorNode1 = new ARealValor(trealtypeNode2);
        }
	nodeList.add(pvalorNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new6() /* reduce ABoolValor */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PValor pvalorNode1;
        {
            // Block
        TBoolType tbooltypeNode2;
        tbooltypeNode2 = (TBoolType)nodeArrayList1.get(0);

        pvalorNode1 = new ABoolValor(tbooltypeNode2);
        }
	nodeList.add(pvalorNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new7() /* reduce AVarValor */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PValor pvalorNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);

        pvalorNode1 = new AVarValor(tidentifierNode2);
        }
	nodeList.add(pvalorNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new8() /* reduce AUnicoTypeList */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PTypeList ptypelistNode1;
        {
            // Block
        PType ptypeNode2;
        ptypeNode2 = (PType)nodeArrayList1.get(0);

        ptypelistNode1 = new AUnicoTypeList(ptypeNode2);
        }
	nodeList.add(ptypelistNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new9() /* reduce AVariosTypeList */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PTypeList ptypelistNode1;
        {
            // Block
        PType ptypeNode2;
        TComma tcommaNode3;
        PTypeList ptypelistNode4;
        ptypeNode2 = (PType)nodeArrayList1.get(0);
        tcommaNode3 = (TComma)nodeArrayList2.get(0);
        ptypelistNode4 = (PTypeList)nodeArrayList3.get(0);

        ptypelistNode1 = new AVariosTypeList(ptypeNode2, tcommaNode3, ptypelistNode4);
        }
	nodeList.add(ptypelistNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new10() /* reduce AIfCondicional */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PCondicional pcondicionalNode1;
        {
            // Block
        TIfId tifidNode2;
        PCondicao pcondicaoNode3;
        PBloco pblocoNode4;
        tifidNode2 = (TIfId)nodeArrayList1.get(0);
        pcondicaoNode3 = (PCondicao)nodeArrayList2.get(0);
        pblocoNode4 = (PBloco)nodeArrayList3.get(0);

        pcondicionalNode1 = new AIfCondicional(tifidNode2, pcondicaoNode3, pblocoNode4);
        }
	nodeList.add(pcondicionalNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new11() /* reduce AIfelseCondicional */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PCondicional pcondicionalNode1;
        {
            // Block
        PCondicional pcondicionalNode2;
        TElseId telseidNode3;
        PBloco pblocoNode4;
        pcondicionalNode2 = (PCondicional)nodeArrayList1.get(0);
        telseidNode3 = (TElseId)nodeArrayList2.get(0);
        pblocoNode4 = (PBloco)nodeArrayList3.get(0);

        pcondicionalNode1 = new AIfelseCondicional(pcondicionalNode2, telseidNode3, pblocoNode4);
        }
	nodeList.add(pcondicionalNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new12() /* reduce ACondicao */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PCondicao pcondicaoNode1;
        {
            // Block
        TBoolType tbooltypeNode2;
        tbooltypeNode2 = (TBoolType)nodeArrayList1.get(0);

        pcondicaoNode1 = new ACondicao(tbooltypeNode2);
        }
	nodeList.add(pcondicaoNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new13() /* reduce AEqCondicao */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PCondicao pcondicaoNode1;
        {
            // Block
        PValor pvalorNode2;
        PIgual pigualNode3;
        pvalorNode2 = (PValor)nodeArrayList1.get(0);
        pigualNode3 = (PIgual)nodeArrayList2.get(0);

        pcondicaoNode1 = new AEqCondicao(pvalorNode2, pigualNode3);
        }
	nodeList.add(pcondicaoNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new14() /* reduce AMqCondicao */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PCondicao pcondicaoNode1;
        {
            // Block
        PValor pvalorNode2;
        PMaior pmaiorNode3;
        pvalorNode2 = (PValor)nodeArrayList1.get(0);
        pmaiorNode3 = (PMaior)nodeArrayList2.get(0);

        pcondicaoNode1 = new AMqCondicao(pvalorNode2, pmaiorNode3);
        }
	nodeList.add(pcondicaoNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new15() /* reduce AMnCondicao */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PCondicao pcondicaoNode1;
        {
            // Block
        PValor pvalorNode2;
        PMenor pmenorNode3;
        pvalorNode2 = (PValor)nodeArrayList1.get(0);
        pmenorNode3 = (PMenor)nodeArrayList2.get(0);

        pcondicaoNode1 = new AMnCondicao(pvalorNode2, pmenorNode3);
        }
	nodeList.add(pcondicaoNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new16() /* reduce AMneqCondicao */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PCondicao pcondicaoNode1;
        {
            // Block
        PValor pvalorNode2;
        PMenorIgual pmenorigualNode3;
        pvalorNode2 = (PValor)nodeArrayList1.get(0);
        pmenorigualNode3 = (PMenorIgual)nodeArrayList2.get(0);

        pcondicaoNode1 = new AMneqCondicao(pvalorNode2, pmenorigualNode3);
        }
	nodeList.add(pcondicaoNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new17() /* reduce AMaeqCondicao */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PCondicao pcondicaoNode1;
        {
            // Block
        PValor pvalorNode2;
        PMaiorIgual pmaiorigualNode3;
        pvalorNode2 = (PValor)nodeArrayList1.get(0);
        pmaiorigualNode3 = (PMaiorIgual)nodeArrayList2.get(0);

        pcondicaoNode1 = new AMaeqCondicao(pvalorNode2, pmaiorigualNode3);
        }
	nodeList.add(pcondicaoNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new18() /* reduce ANegCondicao */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PCondicao pcondicaoNode1;
        {
            // Block
        TNotId tnotidNode2;
        PCondicao pcondicaoNode3;
        tnotidNode2 = (TNotId)nodeArrayList1.get(0);
        pcondicaoNode3 = (PCondicao)nodeArrayList2.get(0);

        pcondicaoNode1 = new ANegCondicao(tnotidNode2, pcondicaoNode3);
        }
	nodeList.add(pcondicaoNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new19() /* reduce AAndCondicao */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PCondicao pcondicaoNode1;
        {
            // Block
        PCondicao pcondicaoNode2;
        PAnd pandNode3;
        pcondicaoNode2 = (PCondicao)nodeArrayList1.get(0);
        pandNode3 = (PAnd)nodeArrayList2.get(0);

        pcondicaoNode1 = new AAndCondicao(pcondicaoNode2, pandNode3);
        }
	nodeList.add(pcondicaoNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new20() /* reduce AOrCondicao */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PCondicao pcondicaoNode1;
        {
            // Block
        PCondicao pcondicaoNode2;
        POr porNode3;
        pcondicaoNode2 = (PCondicao)nodeArrayList1.get(0);
        porNode3 = (POr)nodeArrayList2.get(0);

        pcondicaoNode1 = new AOrCondicao(pcondicaoNode2, porNode3);
        }
	nodeList.add(pcondicaoNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new21() /* reduce ACondCondicao */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PCondicao pcondicaoNode1;
        {
            // Block
        TLPar tlparNode2;
        PCondicao pcondicaoNode3;
        TRPar trparNode4;
        tlparNode2 = (TLPar)nodeArrayList1.get(0);
        pcondicaoNode3 = (PCondicao)nodeArrayList2.get(0);
        trparNode4 = (TRPar)nodeArrayList3.get(0);

        pcondicaoNode1 = new ACondCondicao(tlparNode2, pcondicaoNode3, trparNode4);
        }
	nodeList.add(pcondicaoNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new22() /* reduce AEqIgual */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PIgual pigualNode1;
        {
            // Block
        TIgualQue tigualqueNode2;
        PValor pvalorNode3;
        tigualqueNode2 = (TIgualQue)nodeArrayList1.get(0);
        pvalorNode3 = (PValor)nodeArrayList2.get(0);

        pigualNode1 = new AEqIgual(tigualqueNode2, pvalorNode3);
        }
	nodeList.add(pigualNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new23() /* reduce AMqMaior */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PMaior pmaiorNode1;
        {
            // Block
        TMaiorQue tmaiorqueNode2;
        PValor pvalorNode3;
        tmaiorqueNode2 = (TMaiorQue)nodeArrayList1.get(0);
        pvalorNode3 = (PValor)nodeArrayList2.get(0);

        pmaiorNode1 = new AMqMaior(tmaiorqueNode2, pvalorNode3);
        }
	nodeList.add(pmaiorNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new24() /* reduce AMnMenor */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PMenor pmenorNode1;
        {
            // Block
        TMenorQue tmenorqueNode2;
        PValor pvalorNode3;
        tmenorqueNode2 = (TMenorQue)nodeArrayList1.get(0);
        pvalorNode3 = (PValor)nodeArrayList2.get(0);

        pmenorNode1 = new AMnMenor(tmenorqueNode2, pvalorNode3);
        }
	nodeList.add(pmenorNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new25() /* reduce AMneqMenorIgual */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PMenorIgual pmenorigualNode1;
        {
            // Block
        TMenorIgualQue tmenorigualqueNode2;
        PValor pvalorNode3;
        tmenorigualqueNode2 = (TMenorIgualQue)nodeArrayList1.get(0);
        pvalorNode3 = (PValor)nodeArrayList2.get(0);

        pmenorigualNode1 = new AMneqMenorIgual(tmenorigualqueNode2, pvalorNode3);
        }
	nodeList.add(pmenorigualNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new26() /* reduce AMaeqMaiorIgual */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PMaiorIgual pmaiorigualNode1;
        {
            // Block
        TMaiorIgualQue tmaiorigualqueNode2;
        PValor pvalorNode3;
        tmaiorigualqueNode2 = (TMaiorIgualQue)nodeArrayList1.get(0);
        pvalorNode3 = (PValor)nodeArrayList2.get(0);

        pmaiorigualNode1 = new AMaeqMaiorIgual(tmaiorigualqueNode2, pvalorNode3);
        }
	nodeList.add(pmaiorigualNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new27() /* reduce AAndAnd */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PAnd pandNode1;
        {
            // Block
        TAndId tandidNode2;
        PCondicao pcondicaoNode3;
        tandidNode2 = (TAndId)nodeArrayList1.get(0);
        pcondicaoNode3 = (PCondicao)nodeArrayList2.get(0);

        pandNode1 = new AAndAnd(tandidNode2, pcondicaoNode3);
        }
	nodeList.add(pandNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new28() /* reduce AOrOr */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        POr porNode1;
        {
            // Block
        TOrId toridNode2;
        PCondicao pcondicaoNode3;
        toridNode2 = (TOrId)nodeArrayList1.get(0);
        pcondicaoNode3 = (PCondicao)nodeArrayList2.get(0);

        porNode1 = new AOrOr(toridNode2, pcondicaoNode3);
        }
	nodeList.add(porNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new29() /* reduce ABlocoBloco */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PBloco pblocoNode1;
        {
            // Block
        TStartBlockId tstartblockidNode2;
        PFunctionDeclaration pfunctiondeclarationNode3;
        TEndBlockId tendblockidNode4;
        tstartblockidNode2 = (TStartBlockId)nodeArrayList1.get(0);
        pfunctiondeclarationNode3 = (PFunctionDeclaration)nodeArrayList2.get(0);
        tendblockidNode4 = (TEndBlockId)nodeArrayList3.get(0);

        pblocoNode1 = new ABlocoBloco(tstartblockidNode2, pfunctiondeclarationNode3, tendblockidNode4);
        }
	nodeList.add(pblocoNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new30() /* reduce AFunctionDeclaration */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PFunctionDeclaration pfunctiondeclarationNode1;
        {
            // Block
        PType ptypeNode2;
        PFunctionDeclarator pfunctiondeclaratorNode3;
        TSemicolon tsemicolonNode4;
        ptypeNode2 = (PType)nodeArrayList1.get(0);
        pfunctiondeclaratorNode3 = (PFunctionDeclarator)nodeArrayList2.get(0);
        tsemicolonNode4 = (TSemicolon)nodeArrayList3.get(0);

        pfunctiondeclarationNode1 = new AFunctionDeclaration(ptypeNode2, pfunctiondeclaratorNode3, tsemicolonNode4);
        }
	nodeList.add(pfunctiondeclarationNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new31() /* reduce AIdentifierFunctionDeclaration */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PFunctionDeclaration pfunctiondeclarationNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        PFunctionDeclarator pfunctiondeclaratorNode3;
        TSemicolon tsemicolonNode4;
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);
        pfunctiondeclaratorNode3 = (PFunctionDeclarator)nodeArrayList2.get(0);
        tsemicolonNode4 = (TSemicolon)nodeArrayList3.get(0);

        pfunctiondeclarationNode1 = new AIdentifierFunctionDeclaration(tidentifierNode2, pfunctiondeclaratorNode3, tsemicolonNode4);
        }
	nodeList.add(pfunctiondeclarationNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new32() /* reduce APointerFunctionDeclarator */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PFunctionDeclarator pfunctiondeclaratorNode1;
        {
            // Block
        PPointerFunction ppointerfunctionNode2;
        ppointerfunctionNode2 = (PPointerFunction)nodeArrayList1.get(0);

        pfunctiondeclaratorNode1 = new APointerFunctionDeclarator(ppointerfunctionNode2);
        }
	nodeList.add(pfunctiondeclaratorNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new33() /* reduce ADirectFunctionDeclarator */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PFunctionDeclarator pfunctiondeclaratorNode1;
        {
            // Block
        PDirectFunctionDeclarator pdirectfunctiondeclaratorNode2;
        pdirectfunctiondeclaratorNode2 = (PDirectFunctionDeclarator)nodeArrayList1.get(0);

        pfunctiondeclaratorNode1 = new ADirectFunctionDeclarator(pdirectfunctiondeclaratorNode2);
        }
	nodeList.add(pfunctiondeclaratorNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new34() /* reduce ADirectPointerFunction */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PPointerFunction ppointerfunctionNode1;
        {
            // Block
        TAtribuicao tatribuicaoNode2;
        PDirectFunctionDeclarator pdirectfunctiondeclaratorNode3;
        tatribuicaoNode2 = (TAtribuicao)nodeArrayList1.get(0);
        pdirectfunctiondeclaratorNode3 = (PDirectFunctionDeclarator)nodeArrayList2.get(0);

        ppointerfunctionNode1 = new ADirectPointerFunction(tatribuicaoNode2, pdirectfunctiondeclaratorNode3);
        }
	nodeList.add(ppointerfunctionNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new35() /* reduce APointerPointerFunction */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PPointerFunction ppointerfunctionNode1;
        {
            // Block
        TAtribuicao tatribuicaoNode2;
        PPointerFunction ppointerfunctionNode3;
        tatribuicaoNode2 = (TAtribuicao)nodeArrayList1.get(0);
        ppointerfunctionNode3 = (PPointerFunction)nodeArrayList2.get(0);

        ppointerfunctionNode1 = new APointerPointerFunction(tatribuicaoNode2, ppointerfunctionNode3);
        }
	nodeList.add(ppointerfunctionNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new36() /* reduce AAidentifierdirectfunctiondeclarator1DirectFunctionDeclarator */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PDirectFunctionDeclarator pdirectfunctiondeclaratorNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        TLPar tlparNode3;
        @SuppressWarnings("unused") Object nullNode4 = null;
        TRPar trparNode5;
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);
        tlparNode3 = (TLPar)nodeArrayList2.get(0);
        trparNode5 = (TRPar)nodeArrayList3.get(0);

        pdirectfunctiondeclaratorNode1 = new AIdentifierDirectFunctionDeclarator(tidentifierNode2, tlparNode3, null, trparNode5);
        }
	nodeList.add(pdirectfunctiondeclaratorNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new37() /* reduce AAidentifierdirectfunctiondeclarator2DirectFunctionDeclarator */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PDirectFunctionDeclarator pdirectfunctiondeclaratorNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        TLPar tlparNode3;
        PParameterList pparameterlistNode4;
        TRPar trparNode5;
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);
        tlparNode3 = (TLPar)nodeArrayList2.get(0);
        pparameterlistNode4 = (PParameterList)nodeArrayList3.get(0);
        trparNode5 = (TRPar)nodeArrayList4.get(0);

        pdirectfunctiondeclaratorNode1 = new AIdentifierDirectFunctionDeclarator(tidentifierNode2, tlparNode3, pparameterlistNode4, trparNode5);
        }
	nodeList.add(pdirectfunctiondeclaratorNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new38() /* reduce AAfunctiondirectfunctiondeclarator1DirectFunctionDeclarator */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PDirectFunctionDeclarator pdirectfunctiondeclaratorNode1;
        {
            // Block
        TLPar tlparNode2;
        PPointerFunction ppointerfunctionNode3;
        TRPar trparNode4;
        TLPar tlparNode5;
        @SuppressWarnings("unused") Object nullNode6 = null;
        TRPar trparNode7;
        tlparNode2 = (TLPar)nodeArrayList1.get(0);
        ppointerfunctionNode3 = (PPointerFunction)nodeArrayList2.get(0);
        trparNode4 = (TRPar)nodeArrayList3.get(0);
        tlparNode5 = (TLPar)nodeArrayList4.get(0);
        trparNode7 = (TRPar)nodeArrayList5.get(0);

        pdirectfunctiondeclaratorNode1 = new AFunctionDirectFunctionDeclarator(tlparNode2, ppointerfunctionNode3, trparNode4, tlparNode5, null, trparNode7);
        }
	nodeList.add(pdirectfunctiondeclaratorNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new39() /* reduce AAfunctiondirectfunctiondeclarator2DirectFunctionDeclarator */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PDirectFunctionDeclarator pdirectfunctiondeclaratorNode1;
        {
            // Block
        TLPar tlparNode2;
        PPointerFunction ppointerfunctionNode3;
        TRPar trparNode4;
        TLPar tlparNode5;
        PParameterList pparameterlistNode6;
        TRPar trparNode7;
        tlparNode2 = (TLPar)nodeArrayList1.get(0);
        ppointerfunctionNode3 = (PPointerFunction)nodeArrayList2.get(0);
        trparNode4 = (TRPar)nodeArrayList3.get(0);
        tlparNode5 = (TLPar)nodeArrayList4.get(0);
        pparameterlistNode6 = (PParameterList)nodeArrayList5.get(0);
        trparNode7 = (TRPar)nodeArrayList6.get(0);

        pdirectfunctiondeclaratorNode1 = new AFunctionDirectFunctionDeclarator(tlparNode2, ppointerfunctionNode3, trparNode4, tlparNode5, pparameterlistNode6, trparNode7);
        }
	nodeList.add(pdirectfunctiondeclaratorNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new40() /* reduce AAparameterlist1ParameterList */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PParameterList pparameterlistNode1;
        {
            // Block
        PParameterDeclaration pparameterdeclarationNode2;
        LinkedList listNode3 = new LinkedList();
        pparameterdeclarationNode2 = (PParameterDeclaration)nodeArrayList1.get(0);
        {
            // Block
        }

        pparameterlistNode1 = new AParameterList(pparameterdeclarationNode2, listNode3);
        }
	nodeList.add(pparameterlistNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new41() /* reduce AAparameterlist2ParameterList */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PParameterList pparameterlistNode1;
        {
            // Block
        PParameterDeclaration pparameterdeclarationNode2;
        LinkedList listNode4 = new LinkedList();
        pparameterdeclarationNode2 = (PParameterDeclaration)nodeArrayList1.get(0);
        {
            // Block
        LinkedList listNode3 = new LinkedList();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        pparameterlistNode1 = new AParameterList(pparameterdeclarationNode2, listNode4);
        }
	nodeList.add(pparameterlistNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new42() /* reduce AParameterListTail */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PParameterListTail pparameterlisttailNode1;
        {
            // Block
        TComma tcommaNode2;
        PParameterDeclaration pparameterdeclarationNode3;
        tcommaNode2 = (TComma)nodeArrayList1.get(0);
        pparameterdeclarationNode3 = (PParameterDeclaration)nodeArrayList2.get(0);

        pparameterlisttailNode1 = new AParameterListTail(tcommaNode2, pparameterdeclarationNode3);
        }
	nodeList.add(pparameterlisttailNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new43() /* reduce AParameterDeclaration */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PParameterDeclaration pparameterdeclarationNode1;
        {
            // Block
        PType ptypeNode2;
        PValor pvalorNode3;
        ptypeNode2 = (PType)nodeArrayList1.get(0);
        pvalorNode3 = (PValor)nodeArrayList2.get(0);

        pparameterdeclarationNode1 = new AParameterDeclaration(ptypeNode2, pvalorNode3);
        }
	nodeList.add(pparameterdeclarationNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new44() /* reduce ATerminal$ParameterListTail */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode2 = new LinkedList();
        {
            // Block
        PParameterListTail pparameterlisttailNode1;
        pparameterlisttailNode1 = (PParameterListTail)nodeArrayList1.get(0);
	if(pparameterlisttailNode1 != null)
	{
	  listNode2.add(pparameterlisttailNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new45() /* reduce ANonTerminal$ParameterListTail */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        LinkedList listNode1 = new LinkedList();
        PParameterListTail pparameterlisttailNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pparameterlisttailNode2 = (PParameterListTail)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pparameterlisttailNode2 != null)
	{
	  listNode3.add(pparameterlisttailNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    private static int[][][] actionTable;
/*      {
			{{-1, ERROR, 0}, {1, SHIFT, 1}, {2, SHIFT, 2}, {3, SHIFT, 3}, {4, SHIFT, 4}, },
			{{-1, REDUCE, 3}, },
			{{-1, REDUCE, 0}, },
			{{-1, REDUCE, 1}, },
			{{-1, REDUCE, 2}, },
			{{-1, ERROR, 5}, {44, ACCEPT, -1}, },
        };*/
    private static int[][][] gotoTable;
/*      {
			{{-1, 5}, },
			{{-1, -1}, },
			{{-1, -1}, },
			{{-1, -1}, },
			{{-1, -1}, },
			{{-1, -1}, },
			{{-1, -1}, },
			{{-1, -1}, },
			{{-1, -1}, },
			{{-1, -1}, },
			{{-1, -1}, },
			{{-1, -1}, },
			{{-1, -1}, },
			{{-1, -1}, },
			{{-1, -1}, },
			{{-1, -1}, },
			{{-1, -1}, },
			{{-1, -1}, },
			{{-1, -1}, },
			{{-1, -1}, },
			{{-1, -1}, },
        };*/
    private static String[] errorMessages;
/*      {
			"expecting: 'char', 'integer', 'bool', 'real'",
			"expecting: EOF",
        };*/
    private static int[] errors;
/*      {
			0, 1, 1, 1, 1, 1, 
        };*/

    static 
    {
        try
        {
            DataInputStream s = new DataInputStream(
                new BufferedInputStream(
                Parser.class.getResourceAsStream("parser.dat")));

            // read actionTable
            int length = s.readInt();
            Parser.actionTable = new int[length][][];
            for(int i = 0; i < Parser.actionTable.length; i++)
            {
                length = s.readInt();
                Parser.actionTable[i] = new int[length][3];
                for(int j = 0; j < Parser.actionTable[i].length; j++)
                {
                for(int k = 0; k < 3; k++)
                {
                    Parser.actionTable[i][j][k] = s.readInt();
                }
                }
            }

            // read gotoTable
            length = s.readInt();
            gotoTable = new int[length][][];
            for(int i = 0; i < gotoTable.length; i++)
            {
                length = s.readInt();
                gotoTable[i] = new int[length][2];
                for(int j = 0; j < gotoTable[i].length; j++)
                {
                for(int k = 0; k < 2; k++)
                {
                    gotoTable[i][j][k] = s.readInt();
                }
                }
            }

            // read errorMessages
            length = s.readInt();
            errorMessages = new String[length];
            for(int i = 0; i < errorMessages.length; i++)
            {
                length = s.readInt();
                StringBuffer buffer = new StringBuffer();

                for(int j = 0; j < length; j++)
                {
                buffer.append(s.readChar());
                }
                errorMessages[i] = buffer.toString();
            }

            // read errors
            length = s.readInt();
            errors = new int[length];
            for(int i = 0; i < errors.length; i++)
            {
                errors[i] = s.readInt();
            }

            s.close();
        }
        catch(Exception e)
        {
            throw new RuntimeException("The file \"parser.dat\" is either missing or corrupted.");
        }
    }
}
